
Infrared.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009514  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b8  080096b8  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080096b8  080096b8  0000a6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096c0  080096c0  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c0  080096c0  0000a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096c4  080096c4  0000a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080096c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a68  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  20000ae4  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001705e  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d8d  00000000  00000000  0002210a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00025e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e53  00000000  00000000  00027160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d66  00000000  00000000  00027fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6e1  00000000  00000000  0004cd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8410  00000000  00000000  0006a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014280a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005148  00000000  00000000  00142850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00147998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009684 	.word	0x08009684

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009684 	.word	0x08009684

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fcbc 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f82c 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f97a 	bl	80007bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f8e4 	bl	8000694 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f910 	bl	80006f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f93e 	bl	8000750 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f008 fc80 	bl	8008dd8 <MX_USB_HOST_Init>
  MX_ADC3_Init();
 80004d8:	f000 f88a 	bl	80005f0 <MX_ADC3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004dc:	f008 fca2 	bl	8008e24 <MX_USB_HOST_Process>

    HAL_ADC_Start(&hadc3);
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <main+0x5c>)
 80004e2:	f000 fd83 	bl	8000fec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 1000);
 80004e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004ea:	480a      	ldr	r0, [pc, #40]	@ (8000514 <main+0x5c>)
 80004ec:	f000 fe83 	bl	80011f6 <HAL_ADC_PollForConversion>
    infData=HAL_ADC_GetValue(&hadc3);
 80004f0:	4808      	ldr	r0, [pc, #32]	@ (8000514 <main+0x5c>)
 80004f2:	f001 f81b 	bl	800152c <HAL_ADC_GetValue>
 80004f6:	ee07 0a90 	vmov	s15, r0
 80004fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004fe:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <main+0x60>)
 8000500:	edc3 7a00 	vstr	s15, [r3]
    HAL_ADC_Stop(&hadc3);
 8000504:	4803      	ldr	r0, [pc, #12]	@ (8000514 <main+0x5c>)
 8000506:	f000 fe43 	bl	8001190 <HAL_ADC_Stop>
    HAL_Delay(200);
 800050a:	20c8      	movs	r0, #200	@ 0xc8
 800050c:	f000 fd06 	bl	8000f1c <HAL_Delay>
    MX_USB_HOST_Process();
 8000510:	bf00      	nop
 8000512:	e7e3      	b.n	80004dc <main+0x24>
 8000514:	20000098 	.word	0x20000098
 8000518:	200001d4 	.word	0x200001d4

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	@ 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	@ 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f009 f81c 	bl	8009568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	@ (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	@ (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000590:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fbdc 	bl	8004d60 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 fa03 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2105      	movs	r1, #5
 80005d0:	4618      	mov	r0, r3
 80005d2:	f004 fe3d 	bl	8005250 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f9ec 	bl	80009b8 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	@ 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <MX_ADC3_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_ADC3_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <MX_ADC3_Init+0x98>)
 800061e:	2201      	movs	r2, #1
 8000620:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_ADC3_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_ADC3_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_ADC3_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_ADC3_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000652:	f000 fc87 	bl	8000f64 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 f9ac 	bl	80009b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000660:	2301      	movs	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000668:	2307      	movs	r3, #7
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_ADC3_Init+0x98>)
 8000672:	f000 ff87 	bl	8001584 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 f99c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098
 800068c:	40012200 	.word	0x40012200
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	@ (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f003 fd61 	bl	8004198 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f96c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000e0 	.word	0x200000e0
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f003 fe76 	bl	8004420 <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 f93d 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000134 	.word	0x20000134
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f005 f8a3 	bl	80058ec <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f904 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000017c 	.word	0x2000017c
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b72      	ldr	r3, [pc, #456]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a71      	ldr	r2, [pc, #452]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b6f      	ldr	r3, [pc, #444]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b6b      	ldr	r3, [pc, #428]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a6a      	ldr	r2, [pc, #424]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b68      	ldr	r3, [pc, #416]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b64      	ldr	r3, [pc, #400]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a63      	ldr	r2, [pc, #396]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b61      	ldr	r3, [pc, #388]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b5d      	ldr	r3, [pc, #372]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a5c      	ldr	r2, [pc, #368]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b5a      	ldr	r3, [pc, #360]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b56      	ldr	r3, [pc, #344]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a55      	ldr	r2, [pc, #340]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b53      	ldr	r3, [pc, #332]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b4f      	ldr	r3, [pc, #316]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a4e      	ldr	r2, [pc, #312]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b4c      	ldr	r3, [pc, #304]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4849      	ldr	r0, [pc, #292]	@ (80009a4 <MX_GPIO_Init+0x1e8>)
 8000880:	f001 fb56 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	4847      	ldr	r0, [pc, #284]	@ (80009a8 <MX_GPIO_Init+0x1ec>)
 800088a:	f001 fb51 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088e:	2200      	movs	r2, #0
 8000890:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000894:	4845      	ldr	r0, [pc, #276]	@ (80009ac <MX_GPIO_Init+0x1f0>)
 8000896:	f001 fb4b 	bl	8001f30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	@ (80009a4 <MX_GPIO_Init+0x1e8>)
 80008b2:	f001 f9a1 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4836      	ldr	r0, [pc, #216]	@ (80009a8 <MX_GPIO_Init+0x1ec>)
 80008ce:	f001 f993 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482e      	ldr	r0, [pc, #184]	@ (80009a8 <MX_GPIO_Init+0x1ec>)
 80008ee:	f001 f983 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482a      	ldr	r0, [pc, #168]	@ (80009b0 <MX_GPIO_Init+0x1f4>)
 8000908:	f001 f976 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800090c:	2304      	movs	r3, #4
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4825      	ldr	r0, [pc, #148]	@ (80009b4 <MX_GPIO_Init+0x1f8>)
 8000920:	f001 f96a 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	@ (80009b4 <MX_GPIO_Init+0x1f8>)
 8000942:	f001 f959 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000946:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800094a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	@ (80009ac <MX_GPIO_Init+0x1f0>)
 8000960:	f001 f94a 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	@ (80009ac <MX_GPIO_Init+0x1f0>)
 8000978:	f001 f93e 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_GPIO_Init+0x1e8>)
 8000992:	f001 f931 	bl	8001bf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	@ 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f001 f8b6 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <HAL_ADC_MspInit+0x8c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12f      	bne.n	8000a96 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <HAL_ADC_MspInit+0x94>)
 8000a82:	f001 f8b9 	bl	8001bf8 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2012      	movs	r0, #18
 8000a8c:	f001 f87d 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a90:	2012      	movs	r0, #18
 8000a92:	f001 f896 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	@ 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40012200 	.word	0x40012200
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_I2C_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <HAL_I2C_MspInit+0x8c>)
 8000b08:	f001 f876 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a31      	ldr	r2, [pc, #196]	@ (8000c2c <HAL_I2S_MspInit+0xf0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d15a      	bne.n	8000c22 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b70:	23c0      	movs	r3, #192	@ 0xc0
 8000b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 fd73 	bl	8005668 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b88:	f7ff ff16 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000be0:	2310      	movs	r3, #16
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <HAL_I2S_MspInit+0xf8>)
 8000bfc:	f000 fffc 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c00:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c12:	2306      	movs	r3, #6
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <HAL_I2S_MspInit+0xfc>)
 8000c1e:	f000 ffeb 	bl	8001bf8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	@ 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800

08000c3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	@ (8000cc0 <HAL_SPI_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c96:	23e0      	movs	r3, #224	@ 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f000 ffa1 	bl	8001bf8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d22:	f000 f8db 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <ADC_IRQHandler+0x10>)
 8000d32:	f000 faeb 	bl	800130c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000098 	.word	0x20000098

08000d40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <OTG_FS_IRQHandler+0x10>)
 8000d46:	f001 fbed 	bl	8002524 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200005bc 	.word	0x200005bc

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	@ (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f008 fc08 	bl	8009598 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20020000 	.word	0x20020000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	200001d8 	.word	0x200001d8
 8000dbc:	20000ae8 	.word	0x20000ae8

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000de8:	f7ff ffea 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f008 fbc7 	bl	80095a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fb4f 	bl	80004b8 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e28:	080096c8 	.word	0x080096c8
  ldr r2, =_sbss
 8000e2c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e30:	20000ae4 	.word	0x20000ae4

08000e34 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <CAN1_RX0_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 fe87 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fdaa 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fe9f 	bl	8001bde <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 fe67 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200001dc 	.word	0x200001dc

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001dc 	.word	0x200001dc

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e033      	b.n	8000fe2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fd46 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d118      	bne.n	8000fd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000faa:	f023 0302 	bic.w	r3, r3, #2
 8000fae:	f043 0202 	orr.w	r2, r3, #2
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fc06 	bl	80017c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd2:	e001      	b.n	8000fd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Start+0x1a>
 8001002:	2302      	movs	r3, #2
 8001004:	e0b2      	b.n	800116c <HAL_ADC_Start+0x180>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	2b01      	cmp	r3, #1
 800101a:	d018      	beq.n	800104e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800102c:	4b52      	ldr	r3, [pc, #328]	@ (8001178 <HAL_ADC_Start+0x18c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a52      	ldr	r2, [pc, #328]	@ (800117c <HAL_ADC_Start+0x190>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0c9a      	lsrs	r2, r3, #18
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001040:	e002      	b.n	8001048 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3b01      	subs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f9      	bne.n	8001042 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d17a      	bne.n	8001152 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001086:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800109a:	d106      	bne.n	80010aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a0:	f023 0206 	bic.w	r2, r3, #6
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80010a8:	e002      	b.n	80010b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b8:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <HAL_ADC_Start+0x194>)
 80010ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12a      	bne.n	8001128 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001184 <HAL_ADC_Start+0x198>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d015      	beq.n	8001108 <HAL_ADC_Start+0x11c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a29      	ldr	r2, [pc, #164]	@ (8001188 <HAL_ADC_Start+0x19c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d105      	bne.n	80010f2 <HAL_ADC_Start+0x106>
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <HAL_ADC_Start+0x194>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00a      	beq.n	8001108 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a25      	ldr	r2, [pc, #148]	@ (800118c <HAL_ADC_Start+0x1a0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d136      	bne.n	800116a <HAL_ADC_Start+0x17e>
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <HAL_ADC_Start+0x194>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	2b00      	cmp	r3, #0
 8001106:	d130      	bne.n	800116a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d129      	bne.n	800116a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	e020      	b.n	800116a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a15      	ldr	r2, [pc, #84]	@ (8001184 <HAL_ADC_Start+0x198>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d11b      	bne.n	800116a <HAL_ADC_Start+0x17e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d114      	bne.n	800116a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	e00b      	b.n	800116a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f043 0210 	orr.w	r2, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000000 	.word	0x20000000
 800117c:	431bde83 	.word	0x431bde83
 8001180:	40012300 	.word	0x40012300
 8001184:	40012000 	.word	0x40012000
 8001188:	40012100 	.word	0x40012100
 800118c:	40012200 	.word	0x40012200

08001190 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Stop+0x16>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e021      	b.n	80011ea <HAL_ADC_Stop+0x5a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0201 	bic.w	r2, r2, #1
 80011bc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001212:	d113      	bne.n	800123c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800121e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001222:	d10b      	bne.n	800123c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f043 0220 	orr.w	r2, r3, #32
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e063      	b.n	8001304 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff fe62 	bl	8000f04 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001242:	e021      	b.n	8001288 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124a:	d01d      	beq.n	8001288 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_ADC_PollForConversion+0x6c>
 8001252:	f7ff fe57 	bl	8000f04 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d212      	bcs.n	8001288 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b02      	cmp	r3, #2
 800126e:	d00b      	beq.n	8001288 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f043 0204 	orr.w	r2, r3, #4
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e03d      	b.n	8001304 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d1d6      	bne.n	8001244 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f06f 0212 	mvn.w	r2, #18
 800129e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d123      	bne.n	8001302 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11f      	bne.n	8001302 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d111      	bne.n	8001302 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d049      	beq.n	80013d6 <HAL_ADC_IRQHandler+0xca>
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d046      	beq.n	80013d6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001358:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d12b      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d127      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800138e:	2b00      	cmp	r3, #0
 8001390:	d119      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0220 	bic.w	r2, r2, #32
 80013a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f8bd 	bl	8001546 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f06f 0212 	mvn.w	r2, #18
 80013d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d057      	beq.n	800149c <HAL_ADC_IRQHandler+0x190>
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d054      	beq.n	800149c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d139      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001430:	2b00      	cmp	r3, #0
 8001432:	d12b      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d124      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d11d      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001454:	2b00      	cmp	r3, #0
 8001456:	d119      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001466:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fa97 	bl	80019c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 020c 	mvn.w	r2, #12
 800149a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014aa:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d017      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x1d6>
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d014      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d10d      	bne.n	80014e2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f841 	bl	800155a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f06f 0201 	mvn.w	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014f0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d015      	beq.n	8001524 <HAL_ADC_IRQHandler+0x218>
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d012      	beq.n	8001524 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f06f 0220 	mvn.w	r2, #32
 8001512:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f82a 	bl	800156e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0220 	mvn.w	r2, #32
 8001522:	601a      	str	r2, [r3, #0]
  }
}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1c>
 800159c:	2302      	movs	r3, #2
 800159e:	e105      	b.n	80017ac <HAL_ADC_ConfigChannel+0x228>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d925      	bls.n	80015fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	3b1e      	subs	r3, #30
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	409a      	lsls	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e022      	b.n	8001642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4403      	add	r3, r0
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d824      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b05      	subs	r3, #5
 800165c:	221f      	movs	r2, #31
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
 8001692:	e04c      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	@ 0x23
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b23      	subs	r3, #35	@ 0x23
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80016e4:	e023      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	@ 0x41
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b41      	subs	r3, #65	@ 0x41
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <HAL_ADC_ConfigChannel+0x234>)
 8001730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <HAL_ADC_ConfigChannel+0x238>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d109      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1cc>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d105      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <HAL_ADC_ConfigChannel+0x238>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d123      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x21e>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d003      	beq.n	800176a <HAL_ADC_ConfigChannel+0x1e6>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b11      	cmp	r3, #17
 8001768:	d11b      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d111      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_ADC_ConfigChannel+0x23c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <HAL_ADC_ConfigChannel+0x240>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9a      	lsrs	r2, r3, #18
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001794:	e002      	b.n	800179c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3b01      	subs	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40012300 	.word	0x40012300
 80017bc:	40012000 	.word	0x40012000
 80017c0:	20000000 	.word	0x20000000
 80017c4:	431bde83 	.word	0x431bde83

080017c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d0:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <ADC_Init+0x1f0>)
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	021a      	lsls	r2, r3, #8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6899      	ldr	r1, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <ADC_Init+0x1f4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d022      	beq.n	80018a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800186e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6899      	ldr	r1, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001890:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6899      	ldr	r1, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e00f      	b.n	80018c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0202 	bic.w	r2, r2, #2
 80018d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7e1b      	ldrb	r3, [r3, #24]
 80018e0:	005a      	lsls	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01b      	beq.n	800192c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001902:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001912:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6859      	ldr	r1, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	3b01      	subs	r3, #1
 8001920:	035a      	lsls	r2, r3, #13
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	e007      	b.n	800193c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800193a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800194a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	3b01      	subs	r3, #1
 8001958:	051a      	lsls	r2, r3, #20
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6899      	ldr	r1, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800197e:	025a      	lsls	r2, r3, #9
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6899      	ldr	r1, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	029a      	lsls	r2, r3, #10
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40012300 	.word	0x40012300
 80019bc:	0f000001 	.word	0x0f000001

080019c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff3e 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff31 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e16b      	b.n	8001eec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 815a 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80b4 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b60      	ldr	r3, [pc, #384]	@ (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a5f      	ldr	r2, [pc, #380]	@ (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <HAL_GPIO_Init+0x30c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001f08 <HAL_GPIO_Init+0x310>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_GPIO_Init+0x314>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	@ (8001f10 <HAL_GPIO_Init+0x318>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a50      	ldr	r2, [pc, #320]	@ (8001f14 <HAL_GPIO_Init+0x31c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f18 <HAL_GPIO_Init+0x320>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x21a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4e      	ldr	r2, [pc, #312]	@ (8001f1c <HAL_GPIO_Init+0x324>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x216>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	@ (8001f20 <HAL_GPIO_Init+0x328>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x212>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4c      	ldr	r2, [pc, #304]	@ (8001f24 <HAL_GPIO_Init+0x32c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x20e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4b      	ldr	r2, [pc, #300]	@ (8001f28 <HAL_GPIO_Init+0x330>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x20a>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00e      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e02:	2308      	movs	r3, #8
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x228>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x310>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b30      	ldr	r3, [pc, #192]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a27      	ldr	r2, [pc, #156]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae90 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e059      	b.n	8002028 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f006 ff80 	bl	8008e94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2203      	movs	r2, #3
 8001f98:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fa2:	d102      	bne.n	8001faa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fd9a 	bl	8005ae8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7c1a      	ldrb	r2, [r3, #16]
 8001fbc:	f88d 2000 	strb.w	r2, [sp]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	f003 fd1b 	bl	80059fe <USB_CoreInit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e026      	b.n	8002028 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fd92 	bl	8005b0a <USB_SetCurrentMode>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e017      	b.n	8002028 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7c1a      	ldrb	r2, [r3, #16]
 8002000:	f88d 2000 	strb.w	r2, [sp]
 8002004:	3304      	adds	r3, #4
 8002006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002008:	f003 ff34 	bl	8005e74 <USB_HostInit>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e004      	b.n	8002028 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08b      	sub	sp, #44	@ 0x2c
 8002034:	af04      	add	r7, sp, #16
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	460b      	mov	r3, r1
 8002044:	70bb      	strb	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800204a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800204c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_HCD_HC_Init+0x2c>
 8002058:	2302      	movs	r3, #2
 800205a:	e09d      	b.n	8002198 <HAL_HCD_HC_Init+0x168>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3319      	adds	r3, #25
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3314      	adds	r3, #20
 8002088:	787a      	ldrb	r2, [r7, #1]
 800208a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3315      	adds	r3, #21
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3326      	adds	r3, #38	@ 0x26
 80020b0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80020b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	78bb      	ldrb	r3, [r7, #2]
 80020ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020be:	b2d8      	uxtb	r0, r3
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	3316      	adds	r3, #22
 80020ce:	4602      	mov	r2, r0
 80020d0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fbc8 	bl	800286c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80020dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da0a      	bge.n	80020fa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3317      	adds	r3, #23
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e009      	b.n	800210e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3317      	adds	r3, #23
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 f812 	bl	800613c <USB_GetHostSpeed>
 8002118:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800211a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10b      	bne.n	800213a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002122:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_HCD_HC_Init+0x10a>
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2bbc      	cmp	r3, #188	@ 0xbc
 8002134:	d901      	bls.n	800213a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002136:	23bc      	movs	r3, #188	@ 0xbc
 8002138:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	3318      	adds	r3, #24
 800214a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800214e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	b298      	uxth	r0, r3
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3328      	adds	r3, #40	@ 0x28
 8002164:	4602      	mov	r2, r0
 8002166:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	b29b      	uxth	r3, r3
 8002170:	787c      	ldrb	r4, [r7, #1]
 8002172:	78ba      	ldrb	r2, [r7, #2]
 8002174:	78f9      	ldrb	r1, [r7, #3]
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4623      	mov	r3, r4
 8002186:	f004 f801 	bl	800618c <USB_HC_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_HCD_HC_Halt+0x1e>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e00f      	b.n	80021de <HAL_HCD_HC_Halt+0x3e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fb93 	bl	80068fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	70fb      	strb	r3, [r7, #3]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70bb      	strb	r3, [r7, #2]
 80021fe:	4613      	mov	r3, r2
 8002200:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	3317      	adds	r3, #23
 8002212:	78ba      	ldrb	r2, [r7, #2]
 8002214:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3326      	adds	r3, #38	@ 0x26
 8002226:	787a      	ldrb	r2, [r7, #1]
 8002228:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800222a:	7c3b      	ldrb	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d114      	bne.n	800225a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	332a      	adds	r3, #42	@ 0x2a
 8002240:	2203      	movs	r2, #3
 8002242:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3319      	adds	r3, #25
 8002254:	7f3a      	ldrb	r2, [r7, #28]
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e009      	b.n	800226e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	332a      	adds	r3, #42	@ 0x2a
 800226a:	2202      	movs	r2, #2
 800226c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	2b03      	cmp	r3, #3
 8002272:	f200 8102 	bhi.w	800247a <HAL_HCD_HC_SubmitRequest+0x292>
 8002276:	a201      	add	r2, pc, #4	@ (adr r2, 800227c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	08002465 	.word	0x08002465
 8002284:	08002351 	.word	0x08002351
 8002288:	080023db 	.word	0x080023db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800228c:	7c3b      	ldrb	r3, [r7, #16]
 800228e:	2b01      	cmp	r3, #1
 8002290:	f040 80f5 	bne.w	800247e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002294:	78bb      	ldrb	r3, [r7, #2]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d12d      	bne.n	80022f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800229a:	8b3b      	ldrh	r3, [r7, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	333d      	adds	r3, #61	@ 0x3d
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	333d      	adds	r3, #61	@ 0x3d
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	332a      	adds	r3, #42	@ 0x2a
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80022de:	e0ce      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	332a      	adds	r3, #42	@ 0x2a
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
      break;
 80022f4:	e0c3      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	331a      	adds	r3, #26
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	f040 80b8 	bne.w	800247e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	333c      	adds	r3, #60	@ 0x3c
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	332a      	adds	r3, #42	@ 0x2a
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
      break;
 8002338:	e0a1      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	332a      	adds	r3, #42	@ 0x2a
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
      break;
 800234e:	e096      	b.n	800247e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002350:	78bb      	ldrb	r3, [r7, #2]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d120      	bne.n	8002398 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	333d      	adds	r3, #61	@ 0x3d
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	332a      	adds	r3, #42	@ 0x2a
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002380:	e07e      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	332a      	adds	r3, #42	@ 0x2a
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
      break;
 8002396:	e073      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	333c      	adds	r3, #60	@ 0x3c
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	332a      	adds	r3, #42	@ 0x2a
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e05d      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	332a      	adds	r3, #42	@ 0x2a
 80023d4:	2202      	movs	r2, #2
 80023d6:	701a      	strb	r2, [r3, #0]
      break;
 80023d8:	e052      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023da:	78bb      	ldrb	r3, [r7, #2]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d120      	bne.n	8002422 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	333d      	adds	r3, #61	@ 0x3d
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	332a      	adds	r3, #42	@ 0x2a
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800240a:	e039      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	332a      	adds	r3, #42	@ 0x2a
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
      break;
 8002420:	e02e      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	333c      	adds	r3, #60	@ 0x3c
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	332a      	adds	r3, #42	@ 0x2a
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
      break;
 800244c:	e018      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	332a      	adds	r3, #42	@ 0x2a
 800245e:	2202      	movs	r2, #2
 8002460:	701a      	strb	r2, [r3, #0]
      break;
 8002462:	e00d      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	332a      	adds	r3, #42	@ 0x2a
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
      break;
 8002478:	e002      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800247e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	332c      	adds	r3, #44	@ 0x2c
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	8b39      	ldrh	r1, [r7, #24]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4403      	add	r3, r0
 80024a4:	3334      	adds	r3, #52	@ 0x34
 80024a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	334c      	adds	r3, #76	@ 0x4c
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3338      	adds	r3, #56	@ 0x38
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3315      	adds	r3, #21
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334d      	adds	r3, #77	@ 0x4d
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	3310      	adds	r3, #16
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	1d19      	adds	r1, r3, #4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	799b      	ldrb	r3, [r3, #6]
 8002512:	461a      	mov	r2, r3
 8002514:	f003 ff66 	bl	80063e4 <USB_HC_StartXfer>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop

08002524 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fc5b 	bl	8005df6 <USB_GetMode>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 80fb 	bne.w	800273e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f003 fc1e 	bl	8005d8e <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80f1 	beq.w	800273c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fc15 	bl	8005d8e <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800256e:	d104      	bne.n	800257a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002578:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fc05 	bl	8005d8e <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800258e:	d104      	bne.n	800259a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002598:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fbf5 	bl	8005d8e <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ae:	d104      	bne.n	80025ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fbe5 	bl	8005d8e <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d103      	bne.n	80025d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2202      	movs	r2, #2
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fbd7 	bl	8005d8e <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ea:	d120      	bne.n	800262e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80025f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002606:	2110      	movs	r1, #16
 8002608:	6938      	ldr	r0, [r7, #16]
 800260a:	f003 faca 	bl	8005ba2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800260e:	6938      	ldr	r0, [r7, #16]
 8002610:	f003 faf9 	bl	8005c06 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7a5b      	ldrb	r3, [r3, #9]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d105      	bne.n	8002628 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f003 fcea 	bl	8005ffc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f006 fcb1 	bl	8008f90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fbab 	bl	8005d8e <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800263e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002642:	d102      	bne.n	800264a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f001 fd33 	bl	80040b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fb9d 	bl	8005d8e <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d106      	bne.n	800266c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 fc7a 	bl	8008f58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2208      	movs	r2, #8
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fb8c 	bl	8005d8e <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002680:	d139      	bne.n	80026f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 f926 	bl	80068d8 <USB_HC_ReadInterrupt>
 800268c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e025      	b.n	80026e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d018      	beq.n	80026da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026be:	d106      	bne.n	80026ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f905 	bl	80028d6 <HCD_HC_IN_IRQHandler>
 80026cc:	e005      	b.n	80026da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 ff67 	bl	80035a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	795b      	ldrb	r3, [r3, #5]
 80026e4:	461a      	mov	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d3d3      	bcc.n	8002694 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fb47 	bl	8005d8e <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b10      	cmp	r3, #16
 8002708:	d101      	bne.n	800270e <HAL_HCD_IRQHandler+0x1ea>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_HCD_IRQHandler+0x1ec>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d014      	beq.n	800273e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0210 	bic.w	r2, r2, #16
 8002722:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f001 fbe4 	bl	8003ef2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0210 	orr.w	r2, r2, #16
 8002738:	619a      	str	r2, [r3, #24]
 800273a:	e000      	b.n	800273e <HAL_HCD_IRQHandler+0x21a>
      return;
 800273c:	bf00      	nop
    }
  }
}
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_HCD_Start+0x16>
 8002756:	2302      	movs	r3, #2
 8002758:	e013      	b.n	8002782 <HAL_HCD_Start+0x3e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fcae 	bl	80060ca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 f9a7 	bl	8005ac6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_HCD_Stop+0x16>
 800279c:	2302      	movs	r3, #2
 800279e:	e00d      	b.n	80027bc <HAL_HCD_Stop+0x32>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fa01 	bl	8006bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fc50 	bl	8006076 <USB_ResetPort>
 80027d6:	4603      	mov	r3, r0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334c      	adds	r3, #76	@ 0x4c
 80027fc:	781b      	ldrb	r3, [r3, #0]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3338      	adds	r3, #56	@ 0x38
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fc92 	bl	800616a <USB_GetCurrentFrame>
 8002846:	4603      	mov	r3, r0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fc6d 	bl	800613c <USB_GetHostSpeed>
 8002862:	4603      	mov	r3, r0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	331a      	adds	r3, #26
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	331b      	adds	r3, #27
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3325      	adds	r3, #37	@ 0x25
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3324      	adds	r3, #36	@ 0x24
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fa5d 	bl	8005db4 <USB_ReadChInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d11a      	bne.n	800293a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2304      	movs	r3, #4
 8002914:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334d      	adds	r3, #77	@ 0x4d
 8002926:	2207      	movs	r2, #7
 8002928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 ffe1 	bl	80068fa <USB_HC_Halt>
 8002938:	e09e      	b.n	8002a78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fa36 	bl	8005db4 <USB_ReadChInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002952:	d11b      	bne.n	800298c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002966:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334d      	adds	r3, #77	@ 0x4d
 8002978:	2208      	movs	r2, #8
 800297a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f003 ffb8 	bl	80068fa <USB_HC_Halt>
 800298a:	e075      	b.n	8002a78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fa0d 	bl	8005db4 <USB_ReadChInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11a      	bne.n	80029da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	2308      	movs	r3, #8
 80029b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	334d      	adds	r3, #77	@ 0x4d
 80029c6:	2206      	movs	r2, #6
 80029c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 ff91 	bl	80068fa <USB_HC_Halt>
 80029d8:	e04e      	b.n	8002a78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 f9e6 	bl	8005db4 <USB_ReadChInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f2:	d11b      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a00:	461a      	mov	r2, r3
 8002a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	@ 0x4d
 8002a18:	2209      	movs	r2, #9
 8002a1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 ff68 	bl	80068fa <USB_HC_Halt>
 8002a2a:	e025      	b.n	8002a78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 f9bd 	bl	8005db4 <USB_ReadChInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b80      	cmp	r3, #128	@ 0x80
 8002a42:	d119      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334d      	adds	r3, #77	@ 0x4d
 8002a66:	2207      	movs	r2, #7
 8002a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 ff41 	bl	80068fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f997 	bl	8005db4 <USB_ReadChInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a90:	d112      	bne.n	8002ab8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 ff2d 	bl	80068fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ab2:	6093      	str	r3, [r2, #8]
 8002ab4:	f000 bd75 	b.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 f977 	bl	8005db4 <USB_ReadChInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	f040 8128 	bne.w	8002d22 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	331b      	adds	r3, #27
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d119      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	331b      	adds	r3, #27
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	0151      	lsls	r1, r2, #5
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	440a      	add	r2, r1
 8002b24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	799b      	ldrb	r3, [r3, #6]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01b      	beq.n	8002b6e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3330      	adds	r3, #48	@ 0x30
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	1ac9      	subs	r1, r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4403      	add	r3, r0
 8002b6a:	3338      	adds	r3, #56	@ 0x38
 8002b6c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	334d      	adds	r3, #77	@ 0x4d
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3344      	adds	r3, #68	@ 0x44
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3326      	adds	r3, #38	@ 0x26
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	3326      	adds	r3, #38	@ 0x26
 8002bce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d110      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fe8c 	bl	80068fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	6093      	str	r3, [r2, #8]
 8002bf4:	e03d      	b.n	8002c72 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	3326      	adds	r3, #38	@ 0x26
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d00a      	beq.n	8002c22 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3326      	adds	r3, #38	@ 0x26
 8002c1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d127      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	0151      	lsls	r1, r2, #5
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	440a      	add	r2, r1
 8002c38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c40:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	334c      	adds	r3, #76	@ 0x4c
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334c      	adds	r3, #76	@ 0x4c
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f006 f99d 	bl	8008fac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	799b      	ldrb	r3, [r3, #6]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d13b      	bne.n	8002cf2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3338      	adds	r3, #56	@ 0x38
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4403      	add	r3, r0
 8002c9a:	3328      	adds	r3, #40	@ 0x28
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	440b      	add	r3, r1
 8002ca0:	1e59      	subs	r1, r3, #1
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4403      	add	r3, r0
 8002cb0:	3328      	adds	r3, #40	@ 0x28
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8470 	beq.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	333c      	adds	r3, #60	@ 0x3c
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	f083 0301 	eor.w	r3, r3, #1
 8002cda:	b2d8      	uxtb	r0, r3
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	333c      	adds	r3, #60	@ 0x3c
 8002cea:	4602      	mov	r2, r0
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	f000 bc58 	b.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	333c      	adds	r3, #60	@ 0x3c
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2d8      	uxtb	r0, r3
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	333c      	adds	r3, #60	@ 0x3c
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	f000 bc40 	b.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 f842 	bl	8005db4 <USB_ReadChInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d131      	bne.n	8002d9e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2320      	movs	r3, #32
 8002d4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331a      	adds	r3, #26
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	f040 841f 	bne.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	331b      	adds	r3, #27
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	334d      	adds	r3, #77	@ 0x4d
 8002d88:	2203      	movs	r2, #3
 8002d8a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fdb0 	bl	80068fa <USB_HC_Halt>
 8002d9a:	f000 bc02 	b.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 f804 	bl	8005db4 <USB_ReadChInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	f040 8305 	bne.w	80033c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	334d      	adds	r3, #77	@ 0x4d
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d114      	bne.n	8002e0a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334d      	adds	r3, #77	@ 0x4d
 8002df0:	2202      	movs	r2, #2
 8002df2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	334c      	adds	r3, #76	@ 0x4c
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e2cc      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	334d      	adds	r3, #77	@ 0x4d
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d114      	bne.n	8002e4a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	334d      	adds	r3, #77	@ 0x4d
 8002e30:	2202      	movs	r2, #2
 8002e32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	334c      	adds	r3, #76	@ 0x4c
 8002e44:	2205      	movs	r2, #5
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e2ac      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	334d      	adds	r3, #77	@ 0x4d
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d00b      	beq.n	8002e78 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	f040 80a6 	bne.w	8002fc4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	334d      	adds	r3, #77	@ 0x4d
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3344      	adds	r3, #68	@ 0x44
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	1c59      	adds	r1, r3, #1
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4403      	add	r3, r0
 8002eac:	3344      	adds	r3, #68	@ 0x44
 8002eae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3344      	adds	r3, #68	@ 0x44
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d943      	bls.n	8002f4e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	331a      	adds	r3, #26
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d123      	bne.n	8002f38 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	331b      	adds	r3, #27
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	331c      	adds	r3, #28
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	0151      	lsls	r1, r2, #5
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	440a      	add	r2, r1
 8002f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f36:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334c      	adds	r3, #76	@ 0x4c
 8002f48:	2204      	movs	r2, #4
 8002f4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f4c:	e229      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	334c      	adds	r3, #76	@ 0x4c
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3326      	adds	r3, #38	@ 0x26
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3326      	adds	r3, #38	@ 0x26
 8002f88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	f040 8209 	bne.w	80033a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fa6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fc2:	e1ee      	b.n	80033a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	334d      	adds	r3, #77	@ 0x4d
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	f040 80c8 	bne.w	800316c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	334d      	adds	r3, #77	@ 0x4d
 8002fec:	2202      	movs	r2, #2
 8002fee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	331b      	adds	r3, #27
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 81ce 	bne.w	80033a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3326      	adds	r3, #38	@ 0x26
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d16b      	bne.n	80030f6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3348      	adds	r3, #72	@ 0x48
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c59      	adds	r1, r3, #1
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4403      	add	r3, r0
 800303e:	3348      	adds	r3, #72	@ 0x48
 8003040:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3348      	adds	r3, #72	@ 0x48
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d943      	bls.n	80030e0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3348      	adds	r3, #72	@ 0x48
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	331b      	adds	r3, #27
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3344      	adds	r3, #68	@ 0x44
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d809      	bhi.n	80030aa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	331c      	adds	r3, #28
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	0151      	lsls	r1, r2, #5
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	440a      	add	r2, r1
 80030c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334c      	adds	r3, #76	@ 0x4c
 80030da:	2204      	movs	r2, #4
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e014      	b.n	800310a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	334c      	adds	r3, #76	@ 0x4c
 80030f0:	2202      	movs	r2, #2
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e009      	b.n	800310a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334c      	adds	r3, #76	@ 0x4c
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3326      	adds	r3, #38	@ 0x26
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3326      	adds	r3, #38	@ 0x26
 8003130:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003132:	2b02      	cmp	r3, #2
 8003134:	f040 8136 	bne.w	80033a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800314e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003156:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003164:	461a      	mov	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e11b      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b03      	cmp	r3, #3
 8003180:	f040 8081 	bne.w	8003286 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	334d      	adds	r3, #77	@ 0x4d
 8003194:	2202      	movs	r2, #2
 8003196:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	331b      	adds	r3, #27
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 80fa 	bne.w	80033a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334c      	adds	r3, #76	@ 0x4c
 80031c0:	2202      	movs	r2, #2
 80031c2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	0151      	lsls	r1, r2, #5
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	440a      	add	r2, r1
 80031da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	0151      	lsls	r1, r2, #5
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	440a      	add	r2, r1
 80031fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003202:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	0151      	lsls	r1, r2, #5
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	440a      	add	r2, r1
 800321a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800321e:	f023 0320 	bic.w	r3, r3, #32
 8003222:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3326      	adds	r3, #38	@ 0x26
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3326      	adds	r3, #38	@ 0x26
 800324a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800324c:	2b02      	cmp	r3, #2
 800324e:	f040 80a9 	bne.w	80033a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003268:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003270:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e08e      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334d      	adds	r3, #77	@ 0x4d
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d143      	bne.n	8003324 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	334d      	adds	r3, #77	@ 0x4d
 80032ac:	2202      	movs	r2, #2
 80032ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	@ 0x4c
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3326      	adds	r3, #38	@ 0x26
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3326      	adds	r3, #38	@ 0x26
 80032ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d159      	bne.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003306:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800330e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331c:	461a      	mov	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e03f      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d126      	bne.n	8003388 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3344      	adds	r3, #68	@ 0x44
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3344      	adds	r3, #68	@ 0x44
 8003370:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334c      	adds	r3, #76	@ 0x4c
 8003382:	2204      	movs	r2, #4
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e00d      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b02      	cmp	r3, #2
 800339c:	f000 8100 	beq.w	80035a0 <HCD_HC_IN_IRQHandler+0xcca>
 80033a0:	e000      	b.n	80033a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334c      	adds	r3, #76	@ 0x4c
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f005 fdf6 	bl	8008fac <HAL_HCD_HC_NotifyURBChange_Callback>
 80033c0:	e0ef      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 fcf2 	bl	8005db4 <USB_ReadChInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d12f      	bne.n	800343a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e6:	461a      	mov	r2, r3
 80033e8:	2340      	movs	r3, #64	@ 0x40
 80033ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	334d      	adds	r3, #77	@ 0x4d
 80033fc:	2205      	movs	r2, #5
 80033fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	331a      	adds	r3, #26
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3344      	adds	r3, #68	@ 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f003 fa61 	bl	80068fa <USB_HC_Halt>
 8003438:	e0b3      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fcb6 	bl	8005db4 <USB_ReadChInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b10      	cmp	r3, #16
 8003450:	f040 80a7 	bne.w	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3326      	adds	r3, #38	@ 0x26
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d11b      	bne.n	80034a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3344      	adds	r3, #68	@ 0x44
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	334d      	adds	r3, #77	@ 0x4d
 800348e:	2204      	movs	r2, #4
 8003490:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fa2d 	bl	80068fa <USB_HC_Halt>
 80034a0:	e03f      	b.n	8003522 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3326      	adds	r3, #38	@ 0x26
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3326      	adds	r3, #38	@ 0x26
 80034c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d129      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	@ 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	799b      	ldrb	r3, [r3, #6]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HCD_HC_IN_IRQHandler+0xc2a>
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331b      	adds	r3, #27
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d110      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	@ 0x4d
 8003510:	2204      	movs	r2, #4
 8003512:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f003 f9ec 	bl	80068fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	331b      	adds	r3, #27
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d129      	bne.n	800358c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	331b      	adds	r3, #27
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	440a      	add	r2, r1
 8003562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	0151      	lsls	r1, r2, #5
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	440a      	add	r2, r1
 8003582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003586:	f043 0320 	orr.w	r3, r3, #32
 800358a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2310      	movs	r3, #16
 800359c:	6093      	str	r3, [r2, #8]
 800359e:	e000      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80035a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fbf4 	bl	8005db4 <USB_ReadChInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d11b      	bne.n	800360e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	2304      	movs	r3, #4
 80035e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	2207      	movs	r2, #7
 80035fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f003 f978 	bl	80068fa <USB_HC_Halt>
 800360a:	f000 bc6f 	b.w	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fbcc 	bl	8005db4 <USB_ReadChInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b20      	cmp	r3, #32
 8003624:	f040 8082 	bne.w	800372c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2320      	movs	r3, #32
 8003638:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3319      	adds	r3, #25
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d124      	bne.n	800369a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	3319      	adds	r3, #25
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334c      	adds	r3, #76	@ 0x4c
 8003674:	2202      	movs	r2, #2
 8003676:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	334d      	adds	r3, #77	@ 0x4d
 8003688:	2203      	movs	r2, #3
 800368a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f003 f930 	bl	80068fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	331a      	adds	r3, #26
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 841d 	bne.w	8003eec <HCD_HC_OUT_IRQHandler+0x944>
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	331b      	adds	r3, #27
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 8411 	bne.w	8003eec <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3326      	adds	r3, #38	@ 0x26
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d009      	beq.n	80036f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	331b      	adds	r3, #27
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	334d      	adds	r3, #77	@ 0x4d
 8003704:	2203      	movs	r2, #3
 8003706:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f003 f8f2 	bl	80068fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	3344      	adds	r3, #68	@ 0x44
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e3df      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fb3d 	bl	8005db4 <USB_ReadChInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003744:	d111      	bne.n	800376a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003758:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f003 f8c9 	bl	80068fa <USB_HC_Halt>
 8003768:	e3c0      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fb1e 	bl	8005db4 <USB_ReadChInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d168      	bne.n	8003854 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3344      	adds	r3, #68	@ 0x44
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f002 fb08 	bl	8005db4 <USB_ReadChInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b40      	cmp	r3, #64	@ 0x40
 80037ac:	d112      	bne.n	80037d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	3319      	adds	r3, #25
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	2340      	movs	r3, #64	@ 0x40
 80037d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	331b      	adds	r3, #27
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	331b      	adds	r3, #27
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	440a      	add	r2, r1
 8003814:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	2301      	movs	r3, #1
 800382e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	334d      	adds	r3, #77	@ 0x4d
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f003 f854 	bl	80068fa <USB_HC_Halt>
 8003852:	e34b      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f002 faa9 	bl	8005db4 <USB_ReadChInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003868:	2b40      	cmp	r3, #64	@ 0x40
 800386a:	d139      	bne.n	80038e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	334d      	adds	r3, #77	@ 0x4d
 800387c:	2205      	movs	r2, #5
 800387e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	331a      	adds	r3, #26
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3319      	adds	r3, #25
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3344      	adds	r3, #68	@ 0x44
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 f817 	bl	80068fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d8:	461a      	mov	r2, r3
 80038da:	2340      	movs	r3, #64	@ 0x40
 80038dc:	6093      	str	r3, [r2, #8]
 80038de:	e305      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fa63 	bl	8005db4 <USB_ReadChInterrupts>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d11a      	bne.n	800392e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2308      	movs	r3, #8
 8003908:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334d      	adds	r3, #77	@ 0x4d
 800391a:	2206      	movs	r2, #6
 800391c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f002 ffe7 	bl	80068fa <USB_HC_Halt>
 800392c:	e2de      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fa3c 	bl	8005db4 <USB_ReadChInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b10      	cmp	r3, #16
 8003944:	d144      	bne.n	80039d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3344      	adds	r3, #68	@ 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	334d      	adds	r3, #77	@ 0x4d
 800396a:	2204      	movs	r2, #4
 800396c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3319      	adds	r3, #25
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d114      	bne.n	80039ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3318      	adds	r3, #24
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3319      	adds	r3, #25
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 ff9f 	bl	80068fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	461a      	mov	r2, r3
 80039ca:	2310      	movs	r3, #16
 80039cc:	6093      	str	r3, [r2, #8]
 80039ce:	e28d      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 f9eb 	bl	8005db4 <USB_ReadChInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e4:	2b80      	cmp	r3, #128	@ 0x80
 80039e6:	d169      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	799b      	ldrb	r3, [r3, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d111      	bne.n	8003a14 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	334d      	adds	r3, #77	@ 0x4d
 8003a00:	2207      	movs	r2, #7
 8003a02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f002 ff74 	bl	80068fa <USB_HC_Halt>
 8003a12:	e049      	b.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3344      	adds	r3, #68	@ 0x44
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4403      	add	r3, r0
 8003a34:	3344      	adds	r3, #68	@ 0x44
 8003a36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3344      	adds	r3, #68	@ 0x44
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d922      	bls.n	8003a94 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3344      	adds	r3, #68	@ 0x44
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	334c      	adds	r3, #76	@ 0x4c
 8003a72:	2204      	movs	r2, #4
 8003a74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	334c      	adds	r3, #76	@ 0x4c
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f005 fa8d 	bl	8008fac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a92:	e009      	b.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334c      	adds	r3, #76	@ 0x4c
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2380      	movs	r3, #128	@ 0x80
 8003ab8:	6093      	str	r3, [r2, #8]
 8003aba:	e217      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f002 f975 	bl	8005db4 <USB_ReadChInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad4:	d11b      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334d      	adds	r3, #77	@ 0x4d
 8003ae6:	2209      	movs	r2, #9
 8003ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 ff01 	bl	80068fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b04:	461a      	mov	r2, r3
 8003b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b0a:	6093      	str	r3, [r2, #8]
 8003b0c:	e1ee      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f002 f94c 	bl	8005db4 <USB_ReadChInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	f040 81df 	bne.w	8003ee6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	2302      	movs	r3, #2
 8003b38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	334d      	adds	r3, #77	@ 0x4d
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f040 8093 	bne.w	8003c78 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	334d      	adds	r3, #77	@ 0x4d
 8003b62:	2202      	movs	r2, #2
 8003b64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	334c      	adds	r3, #76	@ 0x4c
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3326      	adds	r3, #38	@ 0x26
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d00b      	beq.n	8003ba8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3326      	adds	r3, #38	@ 0x26
 8003ba0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f040 8190 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	799b      	ldrb	r3, [r3, #6]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d115      	bne.n	8003bdc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	333d      	adds	r3, #61	@ 0x3d
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2d8      	uxtb	r0, r3
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333d      	adds	r3, #61	@ 0x3d
 8003bd8:	4602      	mov	r2, r0
 8003bda:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	799b      	ldrb	r3, [r3, #6]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 8171 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3334      	adds	r3, #52	@ 0x34
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8165 	beq.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3334      	adds	r3, #52	@ 0x34
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4403      	add	r3, r0
 8003c1e:	3328      	adds	r3, #40	@ 0x28
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	440b      	add	r3, r1
 8003c24:	1e59      	subs	r1, r3, #1
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4403      	add	r3, r0
 8003c34:	3328      	adds	r3, #40	@ 0x28
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 813f 	beq.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	333d      	adds	r3, #61	@ 0x3d
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	f083 0301 	eor.w	r3, r3, #1
 8003c62:	b2d8      	uxtb	r0, r3
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	333d      	adds	r3, #61	@ 0x3d
 8003c72:	4602      	mov	r2, r0
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e127      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334d      	adds	r3, #77	@ 0x4d
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d120      	bne.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334d      	adds	r3, #77	@ 0x4d
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	331b      	adds	r3, #27
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 8107 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334c      	adds	r3, #76	@ 0x4c
 8003cca:	2202      	movs	r2, #2
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e0fb      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334d      	adds	r3, #77	@ 0x4d
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d13a      	bne.n	8003d5c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	334d      	adds	r3, #77	@ 0x4d
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	334c      	adds	r3, #76	@ 0x4c
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	331b      	adds	r3, #27
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 80d1 	bne.w	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	331b      	adds	r3, #27
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d58:	6053      	str	r3, [r2, #4]
 8003d5a:	e0b5      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	334d      	adds	r3, #77	@ 0x4d
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d114      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	334d      	adds	r3, #77	@ 0x4d
 8003d82:	2202      	movs	r2, #2
 8003d84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	334c      	adds	r3, #76	@ 0x4c
 8003d96:	2202      	movs	r2, #2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e095      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	334d      	adds	r3, #77	@ 0x4d
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d114      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	334d      	adds	r3, #77	@ 0x4d
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334c      	adds	r3, #76	@ 0x4c
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e075      	b.n	8003ec8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	334d      	adds	r3, #77	@ 0x4d
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b07      	cmp	r3, #7
 8003df0:	d00a      	beq.n	8003e08 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	334d      	adds	r3, #77	@ 0x4d
 8003e02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e04:	2b09      	cmp	r3, #9
 8003e06:	d170      	bne.n	8003eea <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334d      	adds	r3, #77	@ 0x4d
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3344      	adds	r3, #68	@ 0x44
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1c59      	adds	r1, r3, #1
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4403      	add	r3, r0
 8003e3c:	3344      	adds	r3, #68	@ 0x44
 8003e3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3344      	adds	r3, #68	@ 0x44
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d914      	bls.n	8003e80 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	3344      	adds	r3, #68	@ 0x44
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334c      	adds	r3, #76	@ 0x4c
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e7e:	e022      	b.n	8003ec6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334c      	adds	r3, #76	@ 0x4c
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eaa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ec6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	334c      	adds	r3, #76	@ 0x4c
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f005 f864 	bl	8008fac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ee4:	e002      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003eea:	bf00      	nop
  }
}
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b08a      	sub	sp, #40	@ 0x28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	0c5b      	lsrs	r3, r3, #17
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d004      	beq.n	8003f38 <HCD_RXQLVL_IRQHandler+0x46>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	f000 80b6 	beq.w	80040a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f36:	e0b7      	b.n	80040a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80b3 	beq.w	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	332c      	adds	r3, #44	@ 0x2c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a7 	beq.w	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3338      	adds	r3, #56	@ 0x38
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	18d1      	adds	r1, r2, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4403      	add	r3, r0
 8003f7c:	3334      	adds	r3, #52	@ 0x34
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4299      	cmp	r1, r3
 8003f82:	f200 8083 	bhi.w	800408c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	332c      	adds	r3, #44	@ 0x2c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f001 fe9c 	bl	8005cde <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	332c      	adds	r3, #44	@ 0x2c
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	18d1      	adds	r1, r2, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4403      	add	r3, r0
 8003fca:	332c      	adds	r3, #44	@ 0x2c
 8003fcc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3338      	adds	r3, #56	@ 0x38
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	18d1      	adds	r1, r2, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4403      	add	r3, r0
 8003ff2:	3338      	adds	r3, #56	@ 0x38
 8003ff4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	0cdb      	lsrs	r3, r3, #19
 8004006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800400a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4293      	cmp	r3, r2
 8004024:	d13f      	bne.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d03c      	beq.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004042:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800404a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	333c      	adds	r3, #60	@ 0x3c
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f083 0301 	eor.w	r3, r3, #1
 8004074:	b2d8      	uxtb	r0, r3
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	333c      	adds	r3, #60	@ 0x3c
 8004086:	4602      	mov	r2, r0
 8004088:	701a      	strb	r2, [r3, #0]
      break;
 800408a:	e00c      	b.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334c      	adds	r3, #76	@ 0x4c
 800409c:	2204      	movs	r2, #4
 800409e:	701a      	strb	r2, [r3, #0]
      break;
 80040a0:	e001      	b.n	80040a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80040a6:	bf00      	nop
  }
}
 80040a8:	bf00      	nop
 80040aa:	3728      	adds	r7, #40	@ 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80040dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d10b      	bne.n	8004100 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f004 ff3e 	bl	8008f74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b08      	cmp	r3, #8
 8004108:	d132      	bne.n	8004170 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b04      	cmp	r3, #4
 800411a:	d126      	bne.n	800416a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7a5b      	ldrb	r3, [r3, #9]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d113      	bne.n	800414c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800412a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800412e:	d106      	bne.n	800413e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f001 ff60 	bl	8005ffc <USB_InitFSLSPClkSel>
 800413c:	e011      	b.n	8004162 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f001 ff59 	bl	8005ffc <USB_InitFSLSPClkSel>
 800414a:	e00a      	b.n	8004162 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	79db      	ldrb	r3, [r3, #7]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d106      	bne.n	8004162 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800415a:	461a      	mov	r2, r3
 800415c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004160:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f004 ff30 	bl	8008fc8 <HAL_HCD_PortEnabled_Callback>
 8004168:	e002      	b.n	8004170 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f004 ff3a 	bl	8008fe4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d103      	bne.n	8004182 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f043 0320 	orr.w	r3, r3, #32
 8004180:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6013      	str	r3, [r2, #0]
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e12b      	b.n	8004402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fc74 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	@ 0x24
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041fc:	f001 fa20 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 8004200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4a81      	ldr	r2, [pc, #516]	@ (800440c <HAL_I2C_Init+0x274>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d807      	bhi.n	800421c <HAL_I2C_Init+0x84>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a80      	ldr	r2, [pc, #512]	@ (8004410 <HAL_I2C_Init+0x278>)
 8004210:	4293      	cmp	r3, r2
 8004212:	bf94      	ite	ls
 8004214:	2301      	movls	r3, #1
 8004216:	2300      	movhi	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e006      	b.n	800422a <HAL_I2C_Init+0x92>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a7d      	ldr	r2, [pc, #500]	@ (8004414 <HAL_I2C_Init+0x27c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	bf94      	ite	ls
 8004224:	2301      	movls	r3, #1
 8004226:	2300      	movhi	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e0e7      	b.n	8004402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4a78      	ldr	r2, [pc, #480]	@ (8004418 <HAL_I2C_Init+0x280>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	0c9b      	lsrs	r3, r3, #18
 800423c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a6a      	ldr	r2, [pc, #424]	@ (800440c <HAL_I2C_Init+0x274>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d802      	bhi.n	800426c <HAL_I2C_Init+0xd4>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3301      	adds	r3, #1
 800426a:	e009      	b.n	8004280 <HAL_I2C_Init+0xe8>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	4a69      	ldr	r2, [pc, #420]	@ (800441c <HAL_I2C_Init+0x284>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	099b      	lsrs	r3, r3, #6
 800427e:	3301      	adds	r3, #1
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	430b      	orrs	r3, r1
 8004286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004292:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	495c      	ldr	r1, [pc, #368]	@ (800440c <HAL_I2C_Init+0x274>)
 800429c:	428b      	cmp	r3, r1
 800429e:	d819      	bhi.n	80042d4 <HAL_I2C_Init+0x13c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e59      	subs	r1, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ae:	1c59      	adds	r1, r3, #1
 80042b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042b4:	400b      	ands	r3, r1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_I2C_Init+0x138>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1e59      	subs	r1, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ce:	e051      	b.n	8004374 <HAL_I2C_Init+0x1dc>
 80042d0:	2304      	movs	r3, #4
 80042d2:	e04f      	b.n	8004374 <HAL_I2C_Init+0x1dc>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d111      	bne.n	8004300 <HAL_I2C_Init+0x168>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1e58      	subs	r0, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	440b      	add	r3, r1
 80042ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e012      	b.n	8004326 <HAL_I2C_Init+0x18e>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1e58      	subs	r0, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	0099      	lsls	r1, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	fbb0 f3f3 	udiv	r3, r0, r3
 8004316:	3301      	adds	r3, #1
 8004318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Init+0x196>
 800432a:	2301      	movs	r3, #1
 800432c:	e022      	b.n	8004374 <HAL_I2C_Init+0x1dc>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10e      	bne.n	8004354 <HAL_I2C_Init+0x1bc>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1e58      	subs	r0, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	440b      	add	r3, r1
 8004344:	fbb0 f3f3 	udiv	r3, r0, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004352:	e00f      	b.n	8004374 <HAL_I2C_Init+0x1dc>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1e58      	subs	r0, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	0099      	lsls	r1, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	fbb0 f3f3 	udiv	r3, r0, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004370:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	6809      	ldr	r1, [r1, #0]
 8004378:	4313      	orrs	r3, r2
 800437a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6911      	ldr	r1, [r2, #16]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68d2      	ldr	r2, [r2, #12]
 80043ae:	4311      	orrs	r1, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	000186a0 	.word	0x000186a0
 8004410:	001e847f 	.word	0x001e847f
 8004414:	003d08ff 	.word	0x003d08ff
 8004418:	431bde83 	.word	0x431bde83
 800441c:	10624dd3 	.word	0x10624dd3

08004420 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e128      	b.n	8004684 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a90      	ldr	r2, [pc, #576]	@ (800468c <HAL_I2S_Init+0x26c>)
 800444a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc fb75 	bl	8000b3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004468:	f023 030f 	bic.w	r3, r3, #15
 800446c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2202      	movs	r2, #2
 8004474:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d060      	beq.n	8004540 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004486:	2310      	movs	r3, #16
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e001      	b.n	8004490 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800448c:	2320      	movs	r3, #32
 800448e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b20      	cmp	r3, #32
 8004496:	d802      	bhi.n	800449e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800449e:	2001      	movs	r0, #1
 80044a0:	f001 f9c4 	bl	800582c <HAL_RCCEx_GetPeriphCLKFreq>
 80044a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ae:	d125      	bne.n	80044fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d010      	beq.n	80044da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	3305      	adds	r3, #5
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e01f      	b.n	800451a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	3305      	adds	r3, #5
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e00e      	b.n	800451a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	fbb2 f2f3 	udiv	r2, r2, r3
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	3305      	adds	r3, #5
 8004518:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4a5c      	ldr	r2, [pc, #368]	@ (8004690 <HAL_I2S_Init+0x270>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e003      	b.n	8004548 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004540:	2302      	movs	r3, #2
 8004542:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d902      	bls.n	8004554 <HAL_I2S_Init+0x134>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2bff      	cmp	r3, #255	@ 0xff
 8004552:	d907      	bls.n	8004564 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004558:	f043 0210 	orr.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e08f      	b.n	8004684 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	ea42 0103 	orr.w	r1, r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	430a      	orrs	r2, r1
 8004576:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6851      	ldr	r1, [r2, #4]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	4311      	orrs	r1, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68d2      	ldr	r2, [r2, #12]
 8004594:	4311      	orrs	r1, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6992      	ldr	r2, [r2, #24]
 800459a:	430a      	orrs	r2, r1
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d161      	bne.n	8004674 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a38      	ldr	r2, [pc, #224]	@ (8004694 <HAL_I2S_Init+0x274>)
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a37      	ldr	r2, [pc, #220]	@ (8004698 <HAL_I2S_Init+0x278>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_I2S_Init+0x1a4>
 80045c0:	4b36      	ldr	r3, [pc, #216]	@ (800469c <HAL_I2S_Init+0x27c>)
 80045c2:	e001      	b.n	80045c8 <HAL_I2S_Init+0x1a8>
 80045c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	4932      	ldr	r1, [pc, #200]	@ (8004698 <HAL_I2S_Init+0x278>)
 80045d0:	428a      	cmp	r2, r1
 80045d2:	d101      	bne.n	80045d8 <HAL_I2S_Init+0x1b8>
 80045d4:	4a31      	ldr	r2, [pc, #196]	@ (800469c <HAL_I2S_Init+0x27c>)
 80045d6:	e001      	b.n	80045dc <HAL_I2S_Init+0x1bc>
 80045d8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80045dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80045e0:	f023 030f 	bic.w	r3, r3, #15
 80045e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004698 <HAL_I2S_Init+0x278>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_I2S_Init+0x1d4>
 80045f0:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <HAL_I2S_Init+0x27c>)
 80045f2:	e001      	b.n	80045f8 <HAL_I2S_Init+0x1d8>
 80045f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045f8:	2202      	movs	r2, #2
 80045fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a25      	ldr	r2, [pc, #148]	@ (8004698 <HAL_I2S_Init+0x278>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_I2S_Init+0x1ea>
 8004606:	4b25      	ldr	r3, [pc, #148]	@ (800469c <HAL_I2S_Init+0x27c>)
 8004608:	e001      	b.n	800460e <HAL_I2S_Init+0x1ee>
 800460a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461a:	d003      	beq.n	8004624 <HAL_I2S_Init+0x204>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	e001      	b.n	8004630 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800463a:	4313      	orrs	r3, r2
 800463c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004644:	4313      	orrs	r3, r2
 8004646:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800464e:	4313      	orrs	r3, r2
 8004650:	b29a      	uxth	r2, r3
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	4313      	orrs	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800465c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a0d      	ldr	r2, [pc, #52]	@ (8004698 <HAL_I2S_Init+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_I2S_Init+0x24c>
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <HAL_I2S_Init+0x27c>)
 800466a:	e001      	b.n	8004670 <HAL_I2S_Init+0x250>
 800466c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004670:	897a      	ldrh	r2, [r7, #10]
 8004672:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	08004797 	.word	0x08004797
 8004690:	cccccccd 	.word	0xcccccccd
 8004694:	080048ad 	.word	0x080048ad
 8004698:	40003800 	.word	0x40003800
 800469c:	40003400 	.word	0x40003400

080046a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	881a      	ldrh	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	1c9a      	adds	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10e      	bne.n	8004730 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004720:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff ffb8 	bl	80046a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	b292      	uxth	r2, r2
 800474c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	1c9a      	adds	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10e      	bne.n	800478e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800477e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff93 	bl	80046b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d13a      	bne.n	8004828 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d109      	bne.n	80047d0 <I2S_IRQHandler+0x3a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b40      	cmp	r3, #64	@ 0x40
 80047c8:	d102      	bne.n	80047d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ffb4 	bl	8004738 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	d126      	bne.n	8004828 <I2S_IRQHandler+0x92>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d11f      	bne.n	8004828 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f043 0202 	orr.w	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff50 	bl	80046c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b03      	cmp	r3, #3
 8004832:	d136      	bne.n	80048a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d109      	bne.n	8004852 <I2S_IRQHandler+0xbc>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b80      	cmp	r3, #128	@ 0x80
 800484a:	d102      	bne.n	8004852 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff45 	bl	80046dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b08      	cmp	r3, #8
 800485a:	d122      	bne.n	80048a2 <I2S_IRQHandler+0x10c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b20      	cmp	r3, #32
 8004868:	d11b      	bne.n	80048a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004878:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff13 	bl	80046c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a92      	ldr	r2, [pc, #584]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80048c6:	4b92      	ldr	r3, [pc, #584]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048c8:	e001      	b.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80048ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a8b      	ldr	r2, [pc, #556]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80048e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048e6:	e001      	b.n	80048ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80048e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f8:	d004      	beq.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 8099 	bne.w	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d107      	bne.n	800491e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f925 	bl	8004b68 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9c8 	bl	8004cc8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d13a      	bne.n	80049b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d035      	beq.n	80049b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6e      	ldr	r2, [pc, #440]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004956:	4b6e      	ldr	r3, [pc, #440]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004958:	e001      	b.n	800495e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800495a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4969      	ldr	r1, [pc, #420]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004966:	428b      	cmp	r3, r1
 8004968:	d101      	bne.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800496a:	4b69      	ldr	r3, [pc, #420]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800496c:	e001      	b.n	8004972 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800496e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004972:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004976:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004986:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049aa:	f043 0202 	orr.w	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fe88 	bl	80046c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b08      	cmp	r3, #8
 80049c0:	f040 80c3 	bne.w	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80bd 	beq.w	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a49      	ldr	r2, [pc, #292]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80049ea:	4b49      	ldr	r3, [pc, #292]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049ec:	e001      	b.n	80049f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80049ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4944      	ldr	r1, [pc, #272]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049fa:	428b      	cmp	r3, r1
 80049fc:	d101      	bne.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049fe:	4b44      	ldr	r3, [pc, #272]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a00:	e001      	b.n	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a0a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	f043 0204 	orr.w	r2, r3, #4
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fe4a 	bl	80046c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a34:	e089      	b.n	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d107      	bne.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8be 	bl	8004bcc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8fd 	bl	8004c64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a70:	2b40      	cmp	r3, #64	@ 0x40
 8004a72:	d12f      	bne.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d02a      	beq.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a8c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a9a:	e001      	b.n	8004aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4919      	ldr	r1, [pc, #100]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aa8:	428b      	cmp	r3, r1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004aac:	4b18      	ldr	r3, [pc, #96]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aae:	e001      	b.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ab0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ab4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ab8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fdfa 	bl	80046c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d136      	bne.n	8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d031      	beq.n	8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a07      	ldr	r2, [pc, #28]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004af2:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004af4:	e001      	b.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004af6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4902      	ldr	r1, [pc, #8]	@ (8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b02:	428b      	cmp	r3, r1
 8004b04:	d106      	bne.n	8004b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004b06:	4b02      	ldr	r3, [pc, #8]	@ (8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b08:	e006      	b.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b0a:	bf00      	nop
 8004b0c:	40003800 	.word	0x40003800
 8004b10:	40003400 	.word	0x40003400
 8004b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b1c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b2c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f043 0204 	orr.w	r2, r3, #4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fdc0 	bl	80046c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b48:	e000      	b.n	8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b4a:	bf00      	nop
}
 8004b4c:	bf00      	nop
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	1c99      	adds	r1, r3, #2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b7a:	881a      	ldrh	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d113      	bne.n	8004bc2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ffc9 	bl	8004b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	1c99      	adds	r1, r3, #2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6251      	str	r1, [r2, #36]	@ 0x24
 8004bde:	8819      	ldrh	r1, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <I2SEx_TxISR_I2SExt+0x90>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <I2SEx_TxISR_I2SExt+0x22>
 8004bea:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <I2SEx_TxISR_I2SExt+0x94>)
 8004bec:	e001      	b.n	8004bf2 <I2SEx_TxISR_I2SExt+0x26>
 8004bee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d121      	bne.n	8004c52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <I2SEx_TxISR_I2SExt+0x90>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <I2SEx_TxISR_I2SExt+0x50>
 8004c18:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <I2SEx_TxISR_I2SExt+0x94>)
 8004c1a:	e001      	b.n	8004c20 <I2SEx_TxISR_I2SExt+0x54>
 8004c1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	490d      	ldr	r1, [pc, #52]	@ (8004c5c <I2SEx_TxISR_I2SExt+0x90>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d101      	bne.n	8004c30 <I2SEx_TxISR_I2SExt+0x64>
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c60 <I2SEx_TxISR_I2SExt+0x94>)
 8004c2e:	e001      	b.n	8004c34 <I2SEx_TxISR_I2SExt+0x68>
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff81 	bl	8004b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40003800 	.word	0x40003800
 8004c60:	40003400 	.word	0x40003400

08004c64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68d8      	ldr	r0, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	1c99      	adds	r1, r3, #2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c7c:	b282      	uxth	r2, r0
 8004c7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d113      	bne.n	8004cc0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ca6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ff4a 	bl	8004b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	@ (8004d58 <I2SEx_RxISR_I2SExt+0x90>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <I2SEx_RxISR_I2SExt+0x16>
 8004cda:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <I2SEx_RxISR_I2SExt+0x94>)
 8004cdc:	e001      	b.n	8004ce2 <I2SEx_RxISR_I2SExt+0x1a>
 8004cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ce2:	68d8      	ldr	r0, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	1c99      	adds	r1, r3, #2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004cee:	b282      	uxth	r2, r0
 8004cf0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d121      	bne.n	8004d4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a12      	ldr	r2, [pc, #72]	@ (8004d58 <I2SEx_RxISR_I2SExt+0x90>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <I2SEx_RxISR_I2SExt+0x50>
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <I2SEx_RxISR_I2SExt+0x94>)
 8004d16:	e001      	b.n	8004d1c <I2SEx_RxISR_I2SExt+0x54>
 8004d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	490d      	ldr	r1, [pc, #52]	@ (8004d58 <I2SEx_RxISR_I2SExt+0x90>)
 8004d24:	428b      	cmp	r3, r1
 8004d26:	d101      	bne.n	8004d2c <I2SEx_RxISR_I2SExt+0x64>
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <I2SEx_RxISR_I2SExt+0x94>)
 8004d2a:	e001      	b.n	8004d30 <I2SEx_RxISR_I2SExt+0x68>
 8004d2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff03 	bl	8004b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40003800 	.word	0x40003800
 8004d5c:	40003400 	.word	0x40003400

08004d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e267      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d075      	beq.n	8004e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d7e:	4b88      	ldr	r3, [pc, #544]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d00c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d8a:	4b85      	ldr	r3, [pc, #532]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d112      	bne.n	8004dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d96:	4b82      	ldr	r3, [pc, #520]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da2:	d10b      	bne.n	8004dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d05b      	beq.n	8004e68 <HAL_RCC_OscConfig+0x108>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d157      	bne.n	8004e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e242      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc4:	d106      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x74>
 8004dc6:	4b76      	ldr	r3, [pc, #472]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a75      	ldr	r2, [pc, #468]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e01d      	b.n	8004e10 <HAL_RCC_OscConfig+0xb0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x98>
 8004dde:	4b70      	ldr	r3, [pc, #448]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e00b      	b.n	8004e10 <HAL_RCC_OscConfig+0xb0>
 8004df8:	4b69      	ldr	r3, [pc, #420]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a68      	ldr	r2, [pc, #416]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b66      	ldr	r3, [pc, #408]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a65      	ldr	r2, [pc, #404]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fc f874 	bl	8000f04 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fc f870 	bl	8000f04 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	@ 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e207      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0xc0>
 8004e3e:	e014      	b.n	8004e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fc f860 	bl	8000f04 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fc f85c 	bl	8000f04 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	@ 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e1f3      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	4b51      	ldr	r3, [pc, #324]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0xe8>
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d063      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e76:	4b4a      	ldr	r3, [pc, #296]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e82:	4b47      	ldr	r3, [pc, #284]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d11c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8e:	4b44      	ldr	r3, [pc, #272]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d116      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9a:	4b41      	ldr	r3, [pc, #260]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x152>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e1c7      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4937      	ldr	r1, [pc, #220]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec6:	e03a      	b.n	8004f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed0:	4b34      	ldr	r3, [pc, #208]	@ (8004fa4 <HAL_RCC_OscConfig+0x244>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fc f815 	bl	8000f04 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ede:	f7fc f811 	bl	8000f04 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1a8      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4925      	ldr	r1, [pc, #148]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	e015      	b.n	8004f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f12:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <HAL_RCC_OscConfig+0x244>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fb fff4 	bl	8000f04 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fb fff0 	bl	8000f04 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e187      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f32:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d036      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d016      	beq.n	8004f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f52:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <HAL_RCC_OscConfig+0x248>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fb ffd4 	bl	8000f04 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fb ffd0 	bl	8000f04 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e167      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <HAL_RCC_OscConfig+0x240>)
 8004f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x200>
 8004f7e:	e01b      	b.n	8004fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <HAL_RCC_OscConfig+0x248>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fb ffbd 	bl	8000f04 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8c:	e00e      	b.n	8004fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8e:	f7fb ffb9 	bl	8000f04 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d907      	bls.n	8004fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e150      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	42470000 	.word	0x42470000
 8004fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	4b88      	ldr	r3, [pc, #544]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ea      	bne.n	8004f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8097 	beq.w	80050f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fca:	4b81      	ldr	r3, [pc, #516]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	4b7d      	ldr	r3, [pc, #500]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	4a7c      	ldr	r2, [pc, #496]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	4b77      	ldr	r3, [pc, #476]	@ (80051d4 <HAL_RCC_OscConfig+0x474>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d118      	bne.n	8005034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005002:	4b74      	ldr	r3, [pc, #464]	@ (80051d4 <HAL_RCC_OscConfig+0x474>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a73      	ldr	r2, [pc, #460]	@ (80051d4 <HAL_RCC_OscConfig+0x474>)
 8005008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800500c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500e:	f7fb ff79 	bl	8000f04 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fb ff75 	bl	8000f04 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e10c      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	4b6a      	ldr	r3, [pc, #424]	@ (80051d4 <HAL_RCC_OscConfig+0x474>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d106      	bne.n	800504a <HAL_RCC_OscConfig+0x2ea>
 800503c:	4b64      	ldr	r3, [pc, #400]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005040:	4a63      	ldr	r2, [pc, #396]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6713      	str	r3, [r2, #112]	@ 0x70
 8005048:	e01c      	b.n	8005084 <HAL_RCC_OscConfig+0x324>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d10c      	bne.n	800506c <HAL_RCC_OscConfig+0x30c>
 8005052:	4b5f      	ldr	r3, [pc, #380]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005056:	4a5e      	ldr	r2, [pc, #376]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	6713      	str	r3, [r2, #112]	@ 0x70
 800505e:	4b5c      	ldr	r3, [pc, #368]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	4a5b      	ldr	r2, [pc, #364]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	6713      	str	r3, [r2, #112]	@ 0x70
 800506a:	e00b      	b.n	8005084 <HAL_RCC_OscConfig+0x324>
 800506c:	4b58      	ldr	r3, [pc, #352]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005070:	4a57      	ldr	r2, [pc, #348]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	6713      	str	r3, [r2, #112]	@ 0x70
 8005078:	4b55      	ldr	r3, [pc, #340]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	4a54      	ldr	r2, [pc, #336]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 800507e:	f023 0304 	bic.w	r3, r3, #4
 8005082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d015      	beq.n	80050b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fb ff3a 	bl	8000f04 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005092:	e00a      	b.n	80050aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fb ff36 	bl	8000f04 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e0cb      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050aa:	4b49      	ldr	r3, [pc, #292]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0ee      	beq.n	8005094 <HAL_RCC_OscConfig+0x334>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b8:	f7fb ff24 	bl	8000f04 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c0:	f7fb ff20 	bl	8000f04 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e0b5      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d6:	4b3e      	ldr	r3, [pc, #248]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ee      	bne.n	80050c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e8:	4b39      	ldr	r3, [pc, #228]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	4a38      	ldr	r2, [pc, #224]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a1 	beq.w	8005240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fe:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b08      	cmp	r3, #8
 8005108:	d05c      	beq.n	80051c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d141      	bne.n	8005196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	4b31      	ldr	r3, [pc, #196]	@ (80051d8 <HAL_RCC_OscConfig+0x478>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fb fef4 	bl	8000f04 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005120:	f7fb fef0 	bl	8000f04 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e087      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005132:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	491b      	ldr	r1, [pc, #108]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 8005164:	4313      	orrs	r3, r2
 8005166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <HAL_RCC_OscConfig+0x478>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fb fec9 	bl	8000f04 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005176:	f7fb fec5 	bl	8000f04 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e05c      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005188:	4b11      	ldr	r3, [pc, #68]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x416>
 8005194:	e054      	b.n	8005240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005196:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_RCC_OscConfig+0x478>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519c:	f7fb feb2 	bl	8000f04 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a4:	f7fb feae 	bl	8000f04 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e045      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b6:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <HAL_RCC_OscConfig+0x470>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x444>
 80051c2:	e03d      	b.n	8005240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e038      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40007000 	.word	0x40007000
 80051d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <HAL_RCC_OscConfig+0x4ec>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d028      	beq.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d121      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d11a      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800520c:	4013      	ands	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005214:	4293      	cmp	r3, r2
 8005216:	d111      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	3b01      	subs	r3, #1
 8005226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d107      	bne.n	800523c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0cc      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005264:	4b68      	ldr	r3, [pc, #416]	@ (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d90c      	bls.n	800528c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005272:	4b65      	ldr	r3, [pc, #404]	@ (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527a:	4b63      	ldr	r3, [pc, #396]	@ (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0b8      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d020      	beq.n	80052da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a4:	4b59      	ldr	r3, [pc, #356]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4a58      	ldr	r2, [pc, #352]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052bc:	4b53      	ldr	r3, [pc, #332]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a52      	ldr	r2, [pc, #328]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c8:	4b50      	ldr	r3, [pc, #320]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	494d      	ldr	r1, [pc, #308]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d044      	beq.n	8005370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ee:	4b47      	ldr	r3, [pc, #284]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d119      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e07f      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d003      	beq.n	800530e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530a:	2b03      	cmp	r3, #3
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530e:	4b3f      	ldr	r3, [pc, #252]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e06f      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531e:	4b3b      	ldr	r3, [pc, #236]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e067      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f023 0203 	bic.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4934      	ldr	r1, [pc, #208]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	4313      	orrs	r3, r2
 800533e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005340:	f7fb fde0 	bl	8000f04 <HAL_GetTick>
 8005344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	e00a      	b.n	800535e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005348:	f7fb fddc 	bl	8000f04 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e04f      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	4b2b      	ldr	r3, [pc, #172]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 020c 	and.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	429a      	cmp	r2, r3
 800536e:	d1eb      	bne.n	8005348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005370:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d20c      	bcs.n	8005398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b22      	ldr	r3, [pc, #136]	@ (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e032      	b.n	80053fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a4:	4b19      	ldr	r3, [pc, #100]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4916      	ldr	r1, [pc, #88]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053c2:	4b12      	ldr	r3, [pc, #72]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	490e      	ldr	r1, [pc, #56]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d6:	f000 f821 	bl	800541c <HAL_RCC_GetSysClockFreq>
 80053da:	4602      	mov	r2, r0
 80053dc:	4b0b      	ldr	r3, [pc, #44]	@ (800540c <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	490a      	ldr	r1, [pc, #40]	@ (8005410 <HAL_RCC_ClockConfig+0x1c0>)
 80053e8:	5ccb      	ldrb	r3, [r1, r3]
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	4a09      	ldr	r2, [pc, #36]	@ (8005414 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053f2:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <HAL_RCC_ClockConfig+0x1c8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fb fd40 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40023c00 	.word	0x40023c00
 800540c:	40023800 	.word	0x40023800
 8005410:	080096a0 	.word	0x080096a0
 8005414:	20000000 	.word	0x20000000
 8005418:	20000004 	.word	0x20000004

0800541c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800541c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005420:	b094      	sub	sp, #80	@ 0x50
 8005422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	647b      	str	r3, [r7, #68]	@ 0x44
 8005428:	2300      	movs	r3, #0
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542c:	2300      	movs	r3, #0
 800542e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005434:	4b79      	ldr	r3, [pc, #484]	@ (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b08      	cmp	r3, #8
 800543e:	d00d      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0x40>
 8005440:	2b08      	cmp	r3, #8
 8005442:	f200 80e1 	bhi.w	8005608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x34>
 800544a:	2b04      	cmp	r3, #4
 800544c:	d003      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x3a>
 800544e:	e0db      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005450:	4b73      	ldr	r3, [pc, #460]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x204>)
 8005452:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005454:	e0db      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005456:	4b73      	ldr	r3, [pc, #460]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x208>)
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800545a:	e0d8      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800545c:	4b6f      	ldr	r3, [pc, #444]	@ (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005464:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005466:	4b6d      	ldr	r3, [pc, #436]	@ (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d063      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005472:	4b6a      	ldr	r3, [pc, #424]	@ (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	2200      	movs	r2, #0
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800547c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800547e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005484:	633b      	str	r3, [r7, #48]	@ 0x30
 8005486:	2300      	movs	r3, #0
 8005488:	637b      	str	r3, [r7, #52]	@ 0x34
 800548a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f04f 0100 	mov.w	r1, #0
 800549a:	0159      	lsls	r1, r3, #5
 800549c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a0:	0150      	lsls	r0, r2, #5
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4621      	mov	r1, r4
 80054a8:	1a51      	subs	r1, r2, r1
 80054aa:	6139      	str	r1, [r7, #16]
 80054ac:	4629      	mov	r1, r5
 80054ae:	eb63 0301 	sbc.w	r3, r3, r1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c0:	4659      	mov	r1, fp
 80054c2:	018b      	lsls	r3, r1, #6
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ca:	4651      	mov	r1, sl
 80054cc:	018a      	lsls	r2, r1, #6
 80054ce:	4651      	mov	r1, sl
 80054d0:	ebb2 0801 	subs.w	r8, r2, r1
 80054d4:	4659      	mov	r1, fp
 80054d6:	eb63 0901 	sbc.w	r9, r3, r1
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ee:	4690      	mov	r8, r2
 80054f0:	4699      	mov	r9, r3
 80054f2:	4623      	mov	r3, r4
 80054f4:	eb18 0303 	adds.w	r3, r8, r3
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	462b      	mov	r3, r5
 80054fc:	eb49 0303 	adc.w	r3, r9, r3
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800550e:	4629      	mov	r1, r5
 8005510:	024b      	lsls	r3, r1, #9
 8005512:	4621      	mov	r1, r4
 8005514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005518:	4621      	mov	r1, r4
 800551a:	024a      	lsls	r2, r1, #9
 800551c:	4610      	mov	r0, r2
 800551e:	4619      	mov	r1, r3
 8005520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005522:	2200      	movs	r2, #0
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800552c:	f7fa fe4c 	bl	80001c8 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005538:	e058      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553a:	4b38      	ldr	r3, [pc, #224]	@ (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	2200      	movs	r2, #0
 8005542:	4618      	mov	r0, r3
 8005544:	4611      	mov	r1, r2
 8005546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005554:	4642      	mov	r2, r8
 8005556:	464b      	mov	r3, r9
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	0159      	lsls	r1, r3, #5
 8005562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005566:	0150      	lsls	r0, r2, #5
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4641      	mov	r1, r8
 800556e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005572:	4649      	mov	r1, r9
 8005574:	eb63 0b01 	sbc.w	fp, r3, r1
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800558c:	ebb2 040a 	subs.w	r4, r2, sl
 8005590:	eb63 050b 	sbc.w	r5, r3, fp
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	00eb      	lsls	r3, r5, #3
 800559e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a2:	00e2      	lsls	r2, r4, #3
 80055a4:	4614      	mov	r4, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	4643      	mov	r3, r8
 80055aa:	18e3      	adds	r3, r4, r3
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	464b      	mov	r3, r9
 80055b0:	eb45 0303 	adc.w	r3, r5, r3
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055c2:	4629      	mov	r1, r5
 80055c4:	028b      	lsls	r3, r1, #10
 80055c6:	4621      	mov	r1, r4
 80055c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055cc:	4621      	mov	r1, r4
 80055ce:	028a      	lsls	r2, r1, #10
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d6:	2200      	movs	r2, #0
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	61fa      	str	r2, [r7, #28]
 80055dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e0:	f7fa fdf2 	bl	80001c8 <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4613      	mov	r3, r2
 80055ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ec:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <HAL_RCC_GetSysClockFreq+0x200>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	3301      	adds	r3, #1
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80055fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005606:	e002      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x204>)
 800560a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800560c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005610:	4618      	mov	r0, r3
 8005612:	3750      	adds	r7, #80	@ 0x50
 8005614:	46bd      	mov	sp, r7
 8005616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	00f42400 	.word	0x00f42400
 8005624:	007a1200 	.word	0x007a1200

08005628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800562c:	4b03      	ldr	r3, [pc, #12]	@ (800563c <HAL_RCC_GetHCLKFreq+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20000000 	.word	0x20000000

08005640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005644:	f7ff fff0 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0a9b      	lsrs	r3, r3, #10
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4903      	ldr	r1, [pc, #12]	@ (8005664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40023800 	.word	0x40023800
 8005664:	080096b0 	.word	0x080096b0

08005668 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800568c:	2b00      	cmp	r3, #0
 800568e:	d035      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005690:	4b62      	ldr	r3, [pc, #392]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005696:	f7fb fc35 	bl	8000f04 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800569e:	f7fb fc31 	bl	8000f04 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e0b0      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	019a      	lsls	r2, r3, #6
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	071b      	lsls	r3, r3, #28
 80056c8:	4955      	ldr	r1, [pc, #340]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056d0:	4b52      	ldr	r3, [pc, #328]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056d6:	f7fb fc15 	bl	8000f04 <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056de:	f7fb fc11 	bl	8000f04 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e090      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 8083 	beq.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	4b44      	ldr	r3, [pc, #272]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005712:	4a43      	ldr	r2, [pc, #268]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005718:	6413      	str	r3, [r2, #64]	@ 0x40
 800571a:	4b41      	ldr	r3, [pc, #260]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005726:	4b3f      	ldr	r3, [pc, #252]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a3e      	ldr	r2, [pc, #248]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800572c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005730:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005732:	f7fb fbe7 	bl	8000f04 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800573a:	f7fb fbe3 	bl	8000f04 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e062      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800574c:	4b35      	ldr	r3, [pc, #212]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005758:	4b31      	ldr	r3, [pc, #196]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005760:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02f      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	429a      	cmp	r2, r3
 8005774:	d028      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005776:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005780:	4b29      	ldr	r3, [pc, #164]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005786:	4b28      	ldr	r3, [pc, #160]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800578c:	4a24      	ldr	r2, [pc, #144]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005792:	4b23      	ldr	r3, [pc, #140]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d114      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800579e:	f7fb fbb1 	bl	8000f04 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	e00a      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fb fbad 	bl	8000f04 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e02a      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057bc:	4b18      	ldr	r3, [pc, #96]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ee      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057d4:	d10d      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057d6:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ea:	490d      	ldr	r1, [pc, #52]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	608b      	str	r3, [r1, #8]
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057fc:	6093      	str	r3, [r2, #8]
 80057fe:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005800:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580a:	4905      	ldr	r1, [pc, #20]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580c:	4313      	orrs	r3, r2
 800580e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	42470068 	.word	0x42470068
 8005820:	40023800 	.word	0x40023800
 8005824:	40007000 	.word	0x40007000
 8005828:	42470e40 	.word	0x42470e40

0800582c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d13f      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800584a:	4b24      	ldr	r3, [pc, #144]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d006      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005860:	d12f      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005862:	4b1f      	ldr	r3, [pc, #124]	@ (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005864:	617b      	str	r3, [r7, #20]
          break;
 8005866:	e02f      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005868:	4b1c      	ldr	r3, [pc, #112]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005874:	d108      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005876:	4b19      	ldr	r3, [pc, #100]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800587e:	4a19      	ldr	r2, [pc, #100]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e007      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005888:	4b14      	ldr	r3, [pc, #80]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005890:	4a15      	ldr	r2, [pc, #84]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005898:	4b10      	ldr	r3, [pc, #64]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800589e:	099b      	lsrs	r3, r3, #6
 80058a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80058ac:	4b0b      	ldr	r3, [pc, #44]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b2:	0f1b      	lsrs	r3, r3, #28
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	617b      	str	r3, [r7, #20]
          break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
          break;
 80058c6:	bf00      	nop
        }
      }
      break;
 80058c8:	e000      	b.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80058ca:	bf00      	nop
    }
  }
  return frequency;
 80058cc:	697b      	ldr	r3, [r7, #20]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	00bb8000 	.word	0x00bb8000
 80058e4:	007a1200 	.word	0x007a1200
 80058e8:	00f42400 	.word	0x00f42400

080058ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e07b      	b.n	80059f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800590e:	d009      	beq.n	8005924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	61da      	str	r2, [r3, #28]
 8005916:	e005      	b.n	8005924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb f97c 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800595a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a8:	ea42 0103 	orr.w	r1, r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	f003 0104 	and.w	r1, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	f003 0210 	and.w	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059fe:	b084      	sub	sp, #16
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	f107 001c 	add.w	r0, r7, #28
 8005a0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d123      	bne.n	8005a60 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9dc 	bl	8005e12 <USB_CoreReset>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73fb      	strb	r3, [r7, #15]
 8005a5e:	e01b      	b.n	8005a98 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9d0 	bl	8005e12 <USB_CoreReset>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a8a:	e005      	b.n	8005a98 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a98:	7fbb      	ldrb	r3, [r7, #30]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10b      	bne.n	8005ab6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f043 0206 	orr.w	r2, r3, #6
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ac2:	b004      	add	sp, #16
 8005ac4:	4770      	bx	lr

08005ac6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f023 0201 	bic.w	r2, r3, #1
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d115      	bne.n	8005b58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b38:	200a      	movs	r0, #10
 8005b3a:	f7fb f9ef 	bl	8000f1c <HAL_Delay>
      ms += 10U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	330a      	adds	r3, #10
 8005b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f956 	bl	8005df6 <USB_GetMode>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d01e      	beq.n	8005b8e <USB_SetCurrentMode+0x84>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b54:	d9f0      	bls.n	8005b38 <USB_SetCurrentMode+0x2e>
 8005b56:	e01a      	b.n	8005b8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d115      	bne.n	8005b8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b6a:	200a      	movs	r0, #10
 8005b6c:	f7fb f9d6 	bl	8000f1c <HAL_Delay>
      ms += 10U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	330a      	adds	r3, #10
 8005b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f93d 	bl	8005df6 <USB_GetMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <USB_SetCurrentMode+0x84>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b86:	d9f0      	bls.n	8005b6a <USB_SetCurrentMode+0x60>
 8005b88:	e001      	b.n	8005b8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e005      	b.n	8005b9a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b92:	d101      	bne.n	8005b98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bbc:	d901      	bls.n	8005bc2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e01b      	b.n	8005bfa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	daf2      	bge.n	8005bb0 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	019b      	lsls	r3, r3, #6
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005be6:	d901      	bls.n	8005bec <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d0f0      	beq.n	8005bda <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3301      	adds	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1e:	d901      	bls.n	8005c24 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e018      	b.n	8005c56 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	daf2      	bge.n	8005c12 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2210      	movs	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c42:	d901      	bls.n	8005c48 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d0f0      	beq.n	8005c36 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b089      	sub	sp, #36	@ 0x24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	461a      	mov	r2, r3
 8005c70:	460b      	mov	r3, r1
 8005c72:	71fb      	strb	r3, [r7, #7]
 8005c74:	4613      	mov	r3, r2
 8005c76:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d123      	bne.n	8005cd0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c88:	88bb      	ldrh	r3, [r7, #4]
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e018      	b.n	8005cc8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	031a      	lsls	r2, r3, #12
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61bb      	str	r3, [r7, #24]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d3e2      	bcc.n	8005c96 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3724      	adds	r7, #36	@ 0x24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b08b      	sub	sp, #44	@ 0x2c
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	089b      	lsrs	r3, r3, #2
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	623b      	str	r3, [r7, #32]
 8005d08:	e014      	b.n	8005d34 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	3301      	adds	r3, #1
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	3301      	adds	r3, #1
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	3301      	adds	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	3301      	adds	r3, #1
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d3e6      	bcc.n	8005d0a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d3c:	8bfb      	ldrh	r3, [r7, #30]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01e      	beq.n	8005d80 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f107 0310 	add.w	r3, r7, #16
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	701a      	strb	r2, [r3, #0]
      i++;
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	3301      	adds	r3, #1
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d74:	8bfb      	ldrh	r3, [r7, #30]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d7a:	8bfb      	ldrh	r3, [r7, #30]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1ea      	bne.n	8005d56 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	372c      	adds	r7, #44	@ 0x2c
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4013      	ands	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005de8:	68bb      	ldr	r3, [r7, #8]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0301 	and.w	r3, r3, #1
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e2a:	d901      	bls.n	8005e30 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e01b      	b.n	8005e68 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	daf2      	bge.n	8005e1e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e54:	d901      	bls.n	8005e5a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e006      	b.n	8005e68 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d0f0      	beq.n	8005e48 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e74:	b084      	sub	sp, #16
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e94:	461a      	mov	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d119      	bne.n	8005efe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005eca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10a      	bne.n	8005ee8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ee0:	f043 0304 	orr.w	r3, r3, #4
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e014      	b.n	8005f12 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ef6:	f023 0304 	bic.w	r3, r3, #4
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e009      	b.n	8005f12 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f0c:	f023 0304 	bic.w	r3, r3, #4
 8005f10:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f12:	2110      	movs	r1, #16
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fe44 	bl	8005ba2 <USB_FlushTxFifo>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff fe6e 	bl	8005c06 <USB_FlushRxFifo>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	e015      	b.n	8005f66 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f46:	461a      	mov	r2, r3
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d3e3      	bcc.n	8005f3a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <USB_HostInit+0x170>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10b      	bne.n	8005fa0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a15      	ldr	r2, [pc, #84]	@ (8005fe8 <USB_HostInit+0x174>)
 8005f94:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a14      	ldr	r2, [pc, #80]	@ (8005fec <USB_HostInit+0x178>)
 8005f9a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005f9e:	e009      	b.n	8005fb4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2280      	movs	r2, #128	@ 0x80
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a11      	ldr	r2, [pc, #68]	@ (8005ff0 <USB_HostInit+0x17c>)
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a11      	ldr	r2, [pc, #68]	@ (8005ff4 <USB_HostInit+0x180>)
 8005fb0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d105      	bne.n	8005fc8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f043 0210 	orr.w	r2, r3, #16
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <USB_HostInit+0x184>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe0:	b004      	add	sp, #16
 8005fe2:	4770      	bx	lr
 8005fe4:	40040000 	.word	0x40040000
 8005fe8:	01000200 	.word	0x01000200
 8005fec:	00e00300 	.word	0x00e00300
 8005ff0:	00600080 	.word	0x00600080
 8005ff4:	004000e0 	.word	0x004000e0
 8005ff8:	a3200008 	.word	0xa3200008

08005ffc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006034:	4313      	orrs	r3, r2
 8006036:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d107      	bne.n	800604e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006044:	461a      	mov	r2, r3
 8006046:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800604a:	6053      	str	r3, [r2, #4]
 800604c:	e00c      	b.n	8006068 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d107      	bne.n	8006064 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800605a:	461a      	mov	r2, r3
 800605c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006060:	6053      	str	r3, [r2, #4]
 8006062:	e001      	b.n	8006068 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006096:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80060a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060a6:	2064      	movs	r0, #100	@ 0x64
 80060a8:	f7fa ff38 	bl	8000f1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80060b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060ba:	200a      	movs	r0, #10
 80060bc:	f7fa ff2e 	bl	8000f1c <HAL_Delay>

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80060ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <USB_DriveVbus+0x44>
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d106      	bne.n	800610e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006108:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800610c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006118:	d109      	bne.n	800612e <USB_DriveVbus+0x64>
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800612c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	0c5b      	lsrs	r3, r3, #17
 800615a:	f003 0303 	and.w	r3, r3, #3
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	b29b      	uxth	r3, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	4608      	mov	r0, r1
 8006196:	4611      	mov	r1, r2
 8006198:	461a      	mov	r2, r3
 800619a:	4603      	mov	r3, r0
 800619c:	70fb      	strb	r3, [r7, #3]
 800619e:	460b      	mov	r3, r1
 80061a0:	70bb      	strb	r3, [r7, #2]
 80061a2:	4613      	mov	r3, r2
 80061a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ba:	461a      	mov	r2, r3
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295
 80061c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d87c      	bhi.n	80062c4 <USB_HC_Init+0x138>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <USB_HC_Init+0x44>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061e1 	.word	0x080061e1
 80061d4:	08006287 	.word	0x08006287
 80061d8:	080061e1 	.word	0x080061e1
 80061dc:	08006249 	.word	0x08006249
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ec:	461a      	mov	r2, r3
 80061ee:	f240 439d 	movw	r3, #1181	@ 0x49d
 80061f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da10      	bge.n	800621e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	440a      	add	r2, r1
 8006212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800621a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800621c:	e055      	b.n	80062ca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a6f      	ldr	r2, [pc, #444]	@ (80063e0 <USB_HC_Init+0x254>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d151      	bne.n	80062ca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006240:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006244:	60d3      	str	r3, [r2, #12]
      break;
 8006246:	e040      	b.n	80062ca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006254:	461a      	mov	r2, r3
 8006256:	f240 639d 	movw	r3, #1693	@ 0x69d
 800625a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800625c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da34      	bge.n	80062ce <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4413      	add	r3, r2
 800626c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	440a      	add	r2, r1
 800627a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800627e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006282:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006284:	e023      	b.n	80062ce <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006292:	461a      	mov	r2, r3
 8006294:	f240 2325 	movw	r3, #549	@ 0x225
 8006298:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800629a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da17      	bge.n	80062d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062bc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80062c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062c2:	e006      	b.n	80062d2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	77fb      	strb	r3, [r7, #31]
      break;
 80062c8:	e004      	b.n	80062d4 <USB_HC_Init+0x148>
      break;
 80062ca:	bf00      	nop
 80062cc:	e002      	b.n	80062d4 <USB_HC_Init+0x148>
      break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <USB_HC_Init+0x148>
      break;
 80062d2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e0:	461a      	mov	r2, r3
 80062e2:	2300      	movs	r3, #0
 80062e4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006300:	f043 0302 	orr.w	r3, r3, #2
 8006304:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	6939      	ldr	r1, [r7, #16]
 800631c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006320:	4313      	orrs	r3, r2
 8006322:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006330:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	da03      	bge.n	8006340 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e001      	b.n	8006344 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fef9 	bl	800613c <USB_GetHostSpeed>
 800634a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800634c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006350:	2b02      	cmp	r3, #2
 8006352:	d106      	bne.n	8006362 <USB_HC_Init+0x1d6>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d003      	beq.n	8006362 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800635a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e001      	b.n	8006366 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006366:	787b      	ldrb	r3, [r7, #1]
 8006368:	059b      	lsls	r3, r3, #22
 800636a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800636e:	78bb      	ldrb	r3, [r7, #2]
 8006370:	02db      	lsls	r3, r3, #11
 8006372:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006376:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006378:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800637c:	049b      	lsls	r3, r3, #18
 800637e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006382:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006384:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006386:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800638a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	431a      	orrs	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	440a      	add	r2, r1
 800639c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80063a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063a4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d003      	beq.n	80063b6 <USB_HC_Init+0x22a>
 80063ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d10f      	bne.n	80063d6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40040000 	.word	0x40040000

080063e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08c      	sub	sp, #48	@ 0x30
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80063fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006400:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a5d      	ldr	r2, [pc, #372]	@ (800657c <USB_HC_StartXfer+0x198>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d12f      	bne.n	800646a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d11c      	bne.n	800644a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	7c9b      	ldrb	r3, [r3, #18]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <USB_HC_StartXfer+0x3c>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	7c9b      	ldrb	r3, [r3, #18]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d124      	bne.n	800646a <USB_HC_StartXfer+0x86>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	799b      	ldrb	r3, [r3, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d120      	bne.n	800646a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	440a      	add	r2, r1
 800643e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006446:	60d3      	str	r3, [r2, #12]
 8006448:	e00f      	b.n	800646a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	791b      	ldrb	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <USB_HC_StartXfer+0x86>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	795b      	ldrb	r3, [r3, #5]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d107      	bne.n	800646a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 fb6b 	bl	8006b3c <USB_DoPing>
        return HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e232      	b.n	80068d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	799b      	ldrb	r3, [r3, #6]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d158      	bne.n	8006524 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006472:	2301      	movs	r3, #1
 8006474:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	78db      	ldrb	r3, [r3, #3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800647e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	8a92      	ldrh	r2, [r2, #20]
 8006484:	fb03 f202 	mul.w	r2, r3, r2
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61da      	str	r2, [r3, #28]
 800648c:	e07c      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	7c9b      	ldrb	r3, [r3, #18]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d130      	bne.n	80064f8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	2bbc      	cmp	r3, #188	@ 0xbc
 800649c:	d918      	bls.n	80064d0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	8a9b      	ldrh	r3, [r3, #20]
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d003      	beq.n	80064c0 <USB_HC_StartXfer+0xdc>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d103      	bne.n	80064c8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2202      	movs	r2, #2
 80064c4:	60da      	str	r2, [r3, #12]
 80064c6:	e05f      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2201      	movs	r2, #1
 80064cc:	60da      	str	r2, [r3, #12]
 80064ce:	e05b      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d007      	beq.n	80064f0 <USB_HC_StartXfer+0x10c>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d003      	beq.n	80064f0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2204      	movs	r2, #4
 80064ec:	60da      	str	r2, [r3, #12]
 80064ee:	e04b      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2203      	movs	r2, #3
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e047      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10d      	bne.n	800651a <USB_HC_StartXfer+0x136>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	8a92      	ldrh	r2, [r2, #20]
 8006506:	4293      	cmp	r3, r2
 8006508:	d907      	bls.n	800651a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800650a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	8a92      	ldrh	r2, [r2, #20]
 8006510:	fb03 f202 	mul.w	r2, r3, r2
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	61da      	str	r2, [r3, #28]
 8006518:	e036      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61da      	str	r2, [r3, #28]
 8006522:	e031      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d018      	beq.n	800655e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	8a92      	ldrh	r2, [r2, #20]
 8006534:	4413      	add	r3, r2
 8006536:	3b01      	subs	r3, #1
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	8a92      	ldrh	r2, [r2, #20]
 800653c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006540:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006542:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006544:	8b7b      	ldrh	r3, [r7, #26]
 8006546:	429a      	cmp	r2, r3
 8006548:	d90b      	bls.n	8006562 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800654a:	8b7b      	ldrh	r3, [r7, #26]
 800654c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800654e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	8a92      	ldrh	r2, [r2, #20]
 8006554:	fb03 f202 	mul.w	r2, r3, r2
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	61da      	str	r2, [r3, #28]
 800655c:	e001      	b.n	8006562 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800655e:	2301      	movs	r3, #1
 8006560:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	78db      	ldrb	r3, [r3, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800656a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	8a92      	ldrh	r2, [r2, #20]
 8006570:	fb03 f202 	mul.w	r2, r3, r2
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61da      	str	r2, [r3, #28]
 8006578:	e006      	b.n	8006588 <USB_HC_StartXfer+0x1a4>
 800657a:	bf00      	nop
 800657c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6a1a      	ldr	r2, [r3, #32]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006590:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006592:	04d9      	lsls	r1, r3, #19
 8006594:	4ba3      	ldr	r3, [pc, #652]	@ (8006824 <USB_HC_StartXfer+0x440>)
 8006596:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006598:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	7d9b      	ldrb	r3, [r3, #22]
 800659e:	075b      	lsls	r3, r3, #29
 80065a0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065a4:	69f9      	ldr	r1, [r7, #28]
 80065a6:	0148      	lsls	r0, r1, #5
 80065a8:	6a39      	ldr	r1, [r7, #32]
 80065aa:	4401      	add	r1, r0
 80065ac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6999      	ldr	r1, [r3, #24]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ca:	460a      	mov	r2, r1
 80065cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006600:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006604:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	7e7b      	ldrb	r3, [r7, #25]
 8006616:	075b      	lsls	r3, r3, #29
 8006618:	69f9      	ldr	r1, [r7, #28]
 800661a:	0148      	lsls	r0, r1, #5
 800661c:	6a39      	ldr	r1, [r7, #32]
 800661e:	4401      	add	r1, r0
 8006620:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	799b      	ldrb	r3, [r3, #6]
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 80c3 	bne.w	80067b8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	7c5b      	ldrb	r3, [r3, #17]
 8006636:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800663c:	4313      	orrs	r3, r2
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	440a      	add	r2, r1
 8006646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800664a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800664e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	440a      	add	r2, r1
 8006666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800666a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800666e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	79db      	ldrb	r3, [r3, #7]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d123      	bne.n	80066c0 <USB_HC_StartXfer+0x2dc>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	78db      	ldrb	r3, [r3, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d11f      	bne.n	80066c0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	440a      	add	r2, r1
 8006696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800669a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800669e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066be:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	7c9b      	ldrb	r3, [r3, #18]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d003      	beq.n	80066d0 <USB_HC_StartXfer+0x2ec>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	7c9b      	ldrb	r3, [r3, #18]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d117      	bne.n	8006700 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d113      	bne.n	8006700 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	78db      	ldrb	r3, [r3, #3]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10f      	bne.n	8006700 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066fe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	7c9b      	ldrb	r3, [r3, #18]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d162      	bne.n	80067ce <USB_HC_StartXfer+0x3ea>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d15e      	bne.n	80067ce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	3b01      	subs	r3, #1
 8006716:	2b03      	cmp	r3, #3
 8006718:	d858      	bhi.n	80067cc <USB_HC_StartXfer+0x3e8>
 800671a:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <USB_HC_StartXfer+0x33c>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006731 	.word	0x08006731
 8006724:	08006753 	.word	0x08006753
 8006728:	08006775 	.word	0x08006775
 800672c:	08006797 	.word	0x08006797
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	440a      	add	r2, r1
 8006746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800674a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674e:	6053      	str	r3, [r2, #4]
          break;
 8006750:	e03d      	b.n	80067ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	440a      	add	r2, r1
 8006768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800676c:	f043 030e 	orr.w	r3, r3, #14
 8006770:	6053      	str	r3, [r2, #4]
          break;
 8006772:	e02c      	b.n	80067ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800678e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006792:	6053      	str	r3, [r2, #4]
          break;
 8006794:	e01b      	b.n	80067ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b4:	6053      	str	r3, [r2, #4]
          break;
 80067b6:	e00a      	b.n	80067ce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6053      	str	r3, [r2, #4]
 80067ca:	e000      	b.n	80067ce <USB_HC_StartXfer+0x3ea>
          break;
 80067cc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067e4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	78db      	ldrb	r3, [r3, #3]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e003      	b.n	8006800 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067fe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006814:	461a      	mov	r2, r3
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e055      	b.n	80068d0 <USB_HC_StartXfer+0x4ec>
 8006824:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	78db      	ldrb	r3, [r3, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d14e      	bne.n	80068ce <USB_HC_StartXfer+0x4ea>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d04a      	beq.n	80068ce <USB_HC_StartXfer+0x4ea>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	79db      	ldrb	r3, [r3, #7]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d146      	bne.n	80068ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	7c9b      	ldrb	r3, [r3, #18]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d831      	bhi.n	80068ac <USB_HC_StartXfer+0x4c8>
 8006848:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <USB_HC_StartXfer+0x46c>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006861 	.word	0x08006861
 8006854:	08006885 	.word	0x08006885
 8006858:	08006861 	.word	0x08006861
 800685c:	08006885 	.word	0x08006885
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	3303      	adds	r3, #3
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800686a:	8afa      	ldrh	r2, [r7, #22]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006870:	b29b      	uxth	r3, r3
 8006872:	429a      	cmp	r2, r3
 8006874:	d91c      	bls.n	80068b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	f043 0220 	orr.w	r2, r3, #32
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	619a      	str	r2, [r3, #24]
        }
        break;
 8006882:	e015      	b.n	80068b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	3303      	adds	r3, #3
 800688a:	089b      	lsrs	r3, r3, #2
 800688c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800688e:	8afa      	ldrh	r2, [r7, #22]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	b29b      	uxth	r3, r3
 800689a:	429a      	cmp	r2, r3
 800689c:	d90a      	bls.n	80068b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80068aa:	e003      	b.n	80068b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80068ac:	bf00      	nop
 80068ae:	e002      	b.n	80068b6 <USB_HC_StartXfer+0x4d2>
        break;
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <USB_HC_StartXfer+0x4d2>
        break;
 80068b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6999      	ldr	r1, [r3, #24]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	785a      	ldrb	r2, [r3, #1]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2000      	movs	r0, #0
 80068c6:	9000      	str	r0, [sp, #0]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff f9ca 	bl	8005c62 <USB_WritePacket>
  }

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3728      	adds	r7, #40	@ 0x28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	b29b      	uxth	r3, r3
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b089      	sub	sp, #36	@ 0x24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	460b      	mov	r3, r1
 8006904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0c9b      	lsrs	r3, r3, #18
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	0fdb      	lsrs	r3, r3, #31
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	0fdb      	lsrs	r3, r3, #31
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b20      	cmp	r3, #32
 800695e:	d10d      	bne.n	800697c <USB_HC_Halt+0x82>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <USB_HC_Halt+0x82>
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d002      	beq.n	8006978 <USB_HC_Halt+0x7e>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b03      	cmp	r3, #3
 8006976:	d101      	bne.n	800697c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	e0d8      	b.n	8006b2e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <USB_HC_Halt+0x8e>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d173      	bne.n	8006a70 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	0151      	lsls	r1, r2, #5
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	440a      	add	r2, r1
 800699e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d14a      	bne.n	8006a4a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d133      	bne.n	8006a28 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a0c:	d82e      	bhi.n	8006a6c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a24:	d0ec      	beq.n	8006a00 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a26:	e081      	b.n	8006b2c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a46:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a48:	e070      	b.n	8006b2c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a6a:	e05f      	b.n	8006b2c <USB_HC_Halt+0x232>
            break;
 8006a6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a6e:	e05d      	b.n	8006b2c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d133      	bne.n	8006b08 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006abe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ade:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006aec:	d81d      	bhi.n	8006b2a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b04:	d0ec      	beq.n	8006ae0 <USB_HC_Halt+0x1e6>
 8006b06:	e011      	b.n	8006b2c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e000      	b.n	8006b2c <USB_HC_Halt+0x232>
          break;
 8006b2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b50:	2301      	movs	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	04da      	lsls	r2, r3, #19
 8006b58:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <USB_DoPing+0x74>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	1ff80000 	.word	0x1ff80000

08006bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fe ff8d 	bl	8005ae8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bce:	2110      	movs	r1, #16
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7fe ffe6 	bl	8005ba2 <USB_FlushTxFifo>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff f810 	bl	8005c06 <USB_FlushRxFifo>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e01f      	b.n	8006c36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	3301      	adds	r3, #1
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b0f      	cmp	r3, #15
 8006c3a:	d9dc      	bls.n	8006bf6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	e034      	b.n	8006cac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c76:	461a      	mov	r2, r3
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c88:	d80c      	bhi.n	8006ca4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ca0:	d0ec      	beq.n	8006c7c <USB_StopHost+0xc8>
 8006ca2:	e000      	b.n	8006ca6 <USB_StopHost+0xf2>
        break;
 8006ca4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	2b0f      	cmp	r3, #15
 8006cb0:	d9c7      	bls.n	8006c42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7fe fefc 	bl	8005ac6 <USB_EnableGlobalInt>

  return ret;
 8006cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cd8:	b590      	push	{r4, r7, lr}
 8006cda:	b089      	sub	sp, #36	@ 0x24
 8006cdc:	af04      	add	r7, sp, #16
 8006cde:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fc85 	bl	80075f6 <USBH_FindInterface>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2bff      	cmp	r3, #255	@ 0xff
 8006cf4:	d002      	beq.n	8006cfc <USBH_CDC_InterfaceInit+0x24>
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d901      	bls.n	8006d00 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e13d      	b.n	8006f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fc5a 	bl	80075be <USBH_SelectInterface>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d14:	2302      	movs	r3, #2
 8006d16:	e131      	b.n	8006f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006d1e:	2050      	movs	r0, #80	@ 0x50
 8006d20:	f002 fb64 	bl	80093ec <malloc>
 8006d24:	4603      	mov	r3, r0
 8006d26:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e11f      	b.n	8006f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d3c:	2250      	movs	r2, #80	@ 0x50
 8006d3e:	2100      	movs	r1, #0
 8006d40:	68b8      	ldr	r0, [r7, #8]
 8006d42:	f002 fc11 	bl	8009568 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	211a      	movs	r1, #26
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da15      	bge.n	8006d8a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	211a      	movs	r1, #26
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d6e:	781a      	ldrb	r2, [r3, #0]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	211a      	movs	r1, #26
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d84:	881a      	ldrh	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 ffbe 	bl	8008d12 <USBH_AllocPipe>
 8006d96:	4603      	mov	r3, r0
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	7819      	ldrb	r1, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	7858      	ldrb	r0, [r3, #1]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	8952      	ldrh	r2, [r2, #10]
 8006db6:	9202      	str	r2, [sp, #8]
 8006db8:	2203      	movs	r2, #3
 8006dba:	9201      	str	r2, [sp, #4]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 ff76 	bl	8008cb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f002 fa85 	bl	80092e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2200      	movs	r2, #0
 8006dda:	210a      	movs	r1, #10
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc0a 	bl	80075f6 <USBH_FindInterface>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2bff      	cmp	r3, #255	@ 0xff
 8006dea:	d002      	beq.n	8006df2 <USBH_CDC_InterfaceInit+0x11a>
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d901      	bls.n	8006df6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006df2:	2302      	movs	r3, #2
 8006df4:	e0c2      	b.n	8006f7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	211a      	movs	r1, #26
 8006dfc:	fb01 f303 	mul.w	r3, r1, r3
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da16      	bge.n	8006e3c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	211a      	movs	r1, #26
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	211a      	movs	r1, #26
 8006e2a:	fb01 f303 	mul.w	r3, r1, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	835a      	strh	r2, [r3, #26]
 8006e3a:	e015      	b.n	8006e68 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	211a      	movs	r1, #26
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	211a      	movs	r1, #26
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	211a      	movs	r1, #26
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b25b      	sxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da16      	bge.n	8006eae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	211a      	movs	r1, #26
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	211a      	movs	r1, #26
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ea6:	881a      	ldrh	r2, [r3, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	835a      	strh	r2, [r3, #26]
 8006eac:	e015      	b.n	8006eda <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	211a      	movs	r1, #26
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	4413      	add	r3, r2
 8006eba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	211a      	movs	r1, #26
 8006eca:	fb01 f303 	mul.w	r3, r1, r3
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ed4:	881a      	ldrh	r2, [r3, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	7b9b      	ldrb	r3, [r3, #14]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 ff16 	bl	8008d12 <USBH_AllocPipe>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	7bdb      	ldrb	r3, [r3, #15]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 ff0c 	bl	8008d12 <USBH_AllocPipe>
 8006efa:	4603      	mov	r3, r0
 8006efc:	461a      	mov	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	7b59      	ldrb	r1, [r3, #13]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	7b98      	ldrb	r0, [r3, #14]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	8b12      	ldrh	r2, [r2, #24]
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	9201      	str	r2, [sp, #4]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4623      	mov	r3, r4
 8006f24:	4602      	mov	r2, r0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fec4 	bl	8008cb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	7b19      	ldrb	r1, [r3, #12]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	7bd8      	ldrb	r0, [r3, #15]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	8b52      	ldrh	r2, [r2, #26]
 8006f44:	9202      	str	r2, [sp, #8]
 8006f46:	2202      	movs	r2, #2
 8006f48:	9201      	str	r2, [sp, #4]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 feaf 	bl	8008cb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	7b5b      	ldrb	r3, [r3, #13]
 8006f62:	2200      	movs	r2, #0
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f002 f9ba 	bl	80092e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	7b1b      	ldrb	r3, [r3, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f002 f9b3 	bl	80092e0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd90      	pop	{r4, r7, pc}

08006f84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00e      	beq.n	8006fbc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fea4 	bl	8008cf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 fecf 	bl	8008d54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	7b1b      	ldrb	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00e      	beq.n	8006fe2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	7b1b      	ldrb	r3, [r3, #12]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fe91 	bl	8008cf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 febc 	bl	8008d54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	7b5b      	ldrb	r3, [r3, #13]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00e      	beq.n	8007008 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	7b5b      	ldrb	r3, [r3, #13]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fe7e 	bl	8008cf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	7b5b      	ldrb	r3, [r3, #13]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fea9 	bl	8008d54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	4618      	mov	r0, r3
 800701e:	f002 f9ed 	bl	80093fc <free>
    phost->pActiveClass->pData = 0U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007028:	2200      	movs	r2, #0
 800702a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3340      	adds	r3, #64	@ 0x40
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f8b1 	bl	80071b6 <GetLineCoding>
 8007054:	4603      	mov	r3, r0
 8007056:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007058:	7afb      	ldrb	r3, [r7, #11]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d105      	bne.n	800706a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007064:	2102      	movs	r1, #2
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800706a:	7afb      	ldrb	r3, [r7, #11]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007094:	2b04      	cmp	r3, #4
 8007096:	d877      	bhi.n	8007188 <USBH_CDC_Process+0x114>
 8007098:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <USBH_CDC_Process+0x2c>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070b5 	.word	0x080070b5
 80070a4:	080070bb 	.word	0x080070bb
 80070a8:	080070eb 	.word	0x080070eb
 80070ac:	0800715f 	.word	0x0800715f
 80070b0:	0800716d 	.word	0x0800716d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
      break;
 80070b8:	e06d      	b.n	8007196 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f897 	bl	80071f4 <SetLineCoding>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070d8:	e058      	b.n	800718c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d055      	beq.n	800718c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2204      	movs	r2, #4
 80070e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80070e8:	e050      	b.n	800718c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3340      	adds	r3, #64	@ 0x40
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f860 	bl	80071b6 <GetLineCoding>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d126      	bne.n	800714e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d13b      	bne.n	8007190 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007124:	429a      	cmp	r2, r3
 8007126:	d133      	bne.n	8007190 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007132:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007134:	429a      	cmp	r2, r3
 8007136:	d12b      	bne.n	8007190 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007140:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007142:	429a      	cmp	r2, r3
 8007144:	d124      	bne.n	8007190 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f958 	bl	80073fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800714c:	e020      	b.n	8007190 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d01d      	beq.n	8007190 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2204      	movs	r2, #4
 8007158:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800715c:	e018      	b.n	8007190 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f867 	bl	8007232 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8da 	bl	800731e <CDC_ProcessReception>
      break;
 800716a:	e014      	b.n	8007196 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800716c:	2100      	movs	r1, #0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 f81a 	bl	80081a8 <USBH_ClrFeature>
 8007174:	4603      	mov	r3, r0
 8007176:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007186:	e005      	b.n	8007194 <USBH_CDC_Process+0x120>

    default:
      break;
 8007188:	bf00      	nop
 800718a:	e004      	b.n	8007196 <USBH_CDC_Process+0x122>
      break;
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <USBH_CDC_Process+0x122>
      break;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <USBH_CDC_Process+0x122>
      break;
 8007194:	bf00      	nop

  }

  return status;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	22a1      	movs	r2, #161	@ 0xa1
 80071c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2221      	movs	r2, #33	@ 0x21
 80071ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2207      	movs	r2, #7
 80071dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2207      	movs	r2, #7
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fb14 	bl	8008812 <USBH_CtlReq>
 80071ea:	4603      	mov	r3, r0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2221      	movs	r2, #33	@ 0x21
 8007202:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2207      	movs	r2, #7
 800721a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2207      	movs	r2, #7
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 faf5 	bl	8008812 <USBH_CtlReq>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af02      	add	r7, sp, #8
 8007238:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007244:	2300      	movs	r3, #0
 8007246:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800724e:	2b01      	cmp	r3, #1
 8007250:	d002      	beq.n	8007258 <CDC_ProcessTransmission+0x26>
 8007252:	2b02      	cmp	r3, #2
 8007254:	d023      	beq.n	800729e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007256:	e05e      	b.n	8007316 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	8b12      	ldrh	r2, [r2, #24]
 8007260:	4293      	cmp	r3, r2
 8007262:	d90b      	bls.n	800727c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	69d9      	ldr	r1, [r3, #28]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8b1a      	ldrh	r2, [r3, #24]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	7b5b      	ldrb	r3, [r3, #13]
 8007270:	2001      	movs	r0, #1
 8007272:	9000      	str	r0, [sp, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fcda 	bl	8008c2e <USBH_BulkSendData>
 800727a:	e00b      	b.n	8007294 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	7b5b      	ldrb	r3, [r3, #13]
 800728a:	2001      	movs	r0, #1
 800728c:	9000      	str	r0, [sp, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fccd 	bl	8008c2e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800729c:	e03b      	b.n	8007316 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	7b5b      	ldrb	r3, [r3, #13]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fff1 	bl	800928c <USBH_LL_GetURBState>
 80072aa:	4603      	mov	r3, r0
 80072ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d128      	bne.n	8007306 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	8b12      	ldrh	r2, [r2, #24]
 80072bc:	4293      	cmp	r3, r2
 80072be:	d90e      	bls.n	80072de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	8b12      	ldrh	r2, [r2, #24]
 80072c8:	1a9a      	subs	r2, r3, r2
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	8b12      	ldrh	r2, [r2, #24]
 80072d6:	441a      	add	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	61da      	str	r2, [r3, #28]
 80072dc:	e002      	b.n	80072e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80072f4:	e00e      	b.n	8007314 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f868 	bl	80073d4 <USBH_CDC_TransmitCallback>
      break;
 8007304:	e006      	b.n	8007314 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d103      	bne.n	8007314 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007314:	bf00      	nop
  }
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007330:	2300      	movs	r3, #0
 8007332:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800733a:	2b03      	cmp	r3, #3
 800733c:	d002      	beq.n	8007344 <CDC_ProcessReception+0x26>
 800733e:	2b04      	cmp	r3, #4
 8007340:	d00e      	beq.n	8007360 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007342:	e043      	b.n	80073cc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6a19      	ldr	r1, [r3, #32]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	8b5a      	ldrh	r2, [r3, #26]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	7b1b      	ldrb	r3, [r3, #12]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fc91 	bl	8008c78 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2204      	movs	r2, #4
 800735a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800735e:	e035      	b.n	80073cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	7b1b      	ldrb	r3, [r3, #12]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 ff90 	bl	800928c <USBH_LL_GetURBState>
 800736c:	4603      	mov	r3, r0
 800736e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d129      	bne.n	80073ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	7b1b      	ldrb	r3, [r3, #12]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fef3 	bl	8009168 <USBH_LL_GetLastXferSize>
 8007382:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	429a      	cmp	r2, r3
 800738c:	d016      	beq.n	80073bc <CDC_ProcessReception+0x9e>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	8b5b      	ldrh	r3, [r3, #26]
 8007392:	461a      	mov	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4293      	cmp	r3, r2
 8007398:	d910      	bls.n	80073bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad2      	subs	r2, r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	441a      	add	r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2203      	movs	r2, #3
 80073b6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80073ba:	e006      	b.n	80073ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f80f 	bl	80073e8 <USBH_CDC_ReceiveCallback>
      break;
 80073ca:	bf00      	nop
  }
}
 80073cc:	bf00      	nop
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007424:	2302      	movs	r3, #2
 8007426:	e029      	b.n	800747c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	79fa      	ldrb	r2, [r7, #7]
 800742c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f81f 	bl	8007484 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f001 fdc3 	bl	8009000 <USBH_LL_Init>

  return USBH_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e009      	b.n	80074aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	33e0      	adds	r3, #224	@ 0xe0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	2200      	movs	r2, #0
 80074a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b0f      	cmp	r3, #15
 80074ae:	d9f2      	bls.n	8007496 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e009      	b.n	80074ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d0:	d3f1      	bcc.n	80074b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2240      	movs	r2, #64	@ 0x40
 80074f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	331c      	adds	r3, #28
 8007522:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f002 f81d 	bl	8009568 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007538:	2100      	movs	r1, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f002 f814 	bl	8009568 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007546:	2212      	movs	r2, #18
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f002 f80c 	bl	8009568 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007556:	223e      	movs	r2, #62	@ 0x3e
 8007558:	2100      	movs	r1, #0
 800755a:	4618      	mov	r0, r3
 800755c:	f002 f804 	bl	8009568 <memset>

  return USBH_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d016      	beq.n	80075ac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10e      	bne.n	80075a6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800758e:	1c59      	adds	r1, r3, #1
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	33de      	adds	r3, #222	@ 0xde
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
 80075a4:	e004      	b.n	80075b0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075a6:	2302      	movs	r3, #2
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	e001      	b.n	80075b0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075ac:	2302      	movs	r3, #2
 80075ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d204      	bcs.n	80075e4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80075e2:	e001      	b.n	80075e8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075e4:	2302      	movs	r3, #2
 80075e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b087      	sub	sp, #28
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	4608      	mov	r0, r1
 8007600:	4611      	mov	r1, r2
 8007602:	461a      	mov	r2, r3
 8007604:	4603      	mov	r3, r0
 8007606:	70fb      	strb	r3, [r7, #3]
 8007608:	460b      	mov	r3, r1
 800760a:	70bb      	strb	r3, [r7, #2]
 800760c:	4613      	mov	r3, r2
 800760e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800761e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007620:	e025      	b.n	800766e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	221a      	movs	r2, #26
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	3308      	adds	r3, #8
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	3302      	adds	r3, #2
 8007632:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	795b      	ldrb	r3, [r3, #5]
 8007638:	78fa      	ldrb	r2, [r7, #3]
 800763a:	429a      	cmp	r2, r3
 800763c:	d002      	beq.n	8007644 <USBH_FindInterface+0x4e>
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	2bff      	cmp	r3, #255	@ 0xff
 8007642:	d111      	bne.n	8007668 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007648:	78ba      	ldrb	r2, [r7, #2]
 800764a:	429a      	cmp	r2, r3
 800764c:	d002      	beq.n	8007654 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800764e:	78bb      	ldrb	r3, [r7, #2]
 8007650:	2bff      	cmp	r3, #255	@ 0xff
 8007652:	d109      	bne.n	8007668 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007658:	787a      	ldrb	r2, [r7, #1]
 800765a:	429a      	cmp	r2, r3
 800765c:	d002      	beq.n	8007664 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800765e:	787b      	ldrb	r3, [r7, #1]
 8007660:	2bff      	cmp	r3, #255	@ 0xff
 8007662:	d101      	bne.n	8007668 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	e006      	b.n	8007676 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	3301      	adds	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d9d6      	bls.n	8007622 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007674:	23ff      	movs	r3, #255	@ 0xff
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fcf4 	bl	8009078 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007690:	2101      	movs	r1, #1
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fe0d 	bl	80092b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af04      	add	r7, sp, #16
 80076aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076ac:	2302      	movs	r3, #2
 80076ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d102      	bne.n	80076c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2203      	movs	r2, #3
 80076c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b0b      	cmp	r3, #11
 80076ce:	f200 81bb 	bhi.w	8007a48 <USBH_Process+0x3a4>
 80076d2:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <USBH_Process+0x34>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	08007709 	.word	0x08007709
 80076dc:	0800773b 	.word	0x0800773b
 80076e0:	080077a3 	.word	0x080077a3
 80076e4:	080079e3 	.word	0x080079e3
 80076e8:	08007a49 	.word	0x08007a49
 80076ec:	08007843 	.word	0x08007843
 80076f0:	08007989 	.word	0x08007989
 80076f4:	08007879 	.word	0x08007879
 80076f8:	08007899 	.word	0x08007899
 80076fc:	080078b7 	.word	0x080078b7
 8007700:	080078fb 	.word	0x080078fb
 8007704:	080079cb 	.word	0x080079cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 819b 	beq.w	8007a4c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800771c:	20c8      	movs	r0, #200	@ 0xc8
 800771e:	f001 fe12 	bl	8009346 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fd05 	bl	8009132 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007738:	e188      	b.n	8007a4c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007740:	2b01      	cmp	r3, #1
 8007742:	d107      	bne.n	8007754 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007752:	e18a      	b.n	8007a6a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800775a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800775e:	d914      	bls.n	800778a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007766:	3301      	adds	r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007776:	2b03      	cmp	r3, #3
 8007778:	d903      	bls.n	8007782 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	220d      	movs	r2, #13
 800777e:	701a      	strb	r2, [r3, #0]
      break;
 8007780:	e173      	b.n	8007a6a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
      break;
 8007788:	e16f      	b.n	8007a6a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007790:	f103 020a 	add.w	r2, r3, #10
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800779a:	200a      	movs	r0, #10
 800779c:	f001 fdd3 	bl	8009346 <USBH_Delay>
      break;
 80077a0:	e163      	b.n	8007a6a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077b2:	2104      	movs	r1, #4
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077b8:	2064      	movs	r0, #100	@ 0x64
 80077ba:	f001 fdc4 	bl	8009346 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 fc90 	bl	80090e4 <USBH_LL_GetSpeed>
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2205      	movs	r2, #5
 80077d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 fa9b 	bl	8008d12 <USBH_AllocPipe>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077e4:	2180      	movs	r1, #128	@ 0x80
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fa93 	bl	8008d12 <USBH_AllocPipe>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7919      	ldrb	r1, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007808:	9202      	str	r2, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4603      	mov	r3, r0
 8007812:	2280      	movs	r2, #128	@ 0x80
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fa4d 	bl	8008cb4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7959      	ldrb	r1, [r3, #5]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800782e:	9202      	str	r2, [sp, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	9201      	str	r2, [sp, #4]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4603      	mov	r3, r0
 8007838:	2200      	movs	r2, #0
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fa3a 	bl	8008cb4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007840:	e113      	b.n	8007a6a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f916 	bl	8007a74 <USBH_HandleEnum>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 80fd 	bne.w	8007a50 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007864:	2b01      	cmp	r3, #1
 8007866:	d103      	bne.n	8007870 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2208      	movs	r2, #8
 800786c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800786e:	e0ef      	b.n	8007a50 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2207      	movs	r2, #7
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e0eb      	b.n	8007a50 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 80e8 	beq.w	8007a54 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800788a:	2101      	movs	r1, #1
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2208      	movs	r2, #8
 8007894:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007896:	e0dd      	b.n	8007a54 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc3a 	bl	800811a <USBH_SetCfg>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f040 80d5 	bne.w	8007a58 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2209      	movs	r2, #9
 80078b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078b4:	e0d0      	b.n	8007a58 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d016      	beq.n	80078f2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80078c4:	2101      	movs	r1, #1
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc4a 	bl	8008160 <USBH_SetFeature>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d103      	bne.n	80078e0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	220a      	movs	r2, #10
 80078dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078de:	e0bd      	b.n	8007a5c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	f040 80b9 	bne.w	8007a5c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	220a      	movs	r2, #10
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e0b4      	b.n	8007a5c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	220a      	movs	r2, #10
 80078f6:	701a      	strb	r2, [r3, #0]
      break;
 80078f8:	e0b0      	b.n	8007a5c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 80ad 	beq.w	8007a60 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	e016      	b.n	8007942 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007914:	7bfa      	ldrb	r2, [r7, #15]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	32de      	adds	r2, #222	@ 0xde
 800791a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791e:	791a      	ldrb	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007926:	429a      	cmp	r2, r3
 8007928:	d108      	bne.n	800793c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800792a:	7bfa      	ldrb	r2, [r7, #15]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	32de      	adds	r2, #222	@ 0xde
 8007930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800793a:	e005      	b.n	8007948 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	3301      	adds	r3, #1
 8007940:	73fb      	strb	r3, [r7, #15]
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0e5      	beq.n	8007914 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d109      	bne.n	8007978 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2206      	movs	r2, #6
 8007968:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007970:	2103      	movs	r1, #3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007976:	e073      	b.n	8007a60 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	220d      	movs	r2, #13
 800797c:	701a      	strb	r2, [r3, #0]
      break;
 800797e:	e06f      	b.n	8007a60 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	220d      	movs	r2, #13
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e06b      	b.n	8007a60 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d017      	beq.n	80079c2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d103      	bne.n	80079b2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	220b      	movs	r2, #11
 80079ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079b0:	e058      	b.n	8007a64 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d154      	bne.n	8007a64 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	220d      	movs	r2, #13
 80079be:	701a      	strb	r2, [r3, #0]
      break;
 80079c0:	e050      	b.n	8007a64 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	220d      	movs	r2, #13
 80079c6:	701a      	strb	r2, [r3, #0]
      break;
 80079c8:	e04c      	b.n	8007a64 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d049      	beq.n	8007a68 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
      }
      break;
 80079e0:	e042      	b.n	8007a68 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff fd4a 	bl	8007484 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a1e:	2105      	movs	r1, #5
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d107      	bne.n	8007a40 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff fe22 	bl	8007682 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a3e:	e014      	b.n	8007a6a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fb19 	bl	8009078 <USBH_LL_Start>
      break;
 8007a46:	e010      	b.n	8007a6a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a48:	bf00      	nop
 8007a4a:	e00e      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e00c      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a50:	bf00      	nop
 8007a52:	e00a      	b.n	8007a6a <USBH_Process+0x3c6>
    break;
 8007a54:	bf00      	nop
 8007a56:	e008      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e006      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e004      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a60:	bf00      	nop
 8007a62:	e002      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <USBH_Process+0x3c6>
      break;
 8007a68:	bf00      	nop
  }
  return USBH_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af04      	add	r7, sp, #16
 8007a7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b07      	cmp	r3, #7
 8007a8a:	f200 81bd 	bhi.w	8007e08 <USBH_HandleEnum+0x394>
 8007a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <USBH_HandleEnum+0x20>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007b6f 	.word	0x08007b6f
 8007a9c:	08007bd9 	.word	0x08007bd9
 8007aa0:	08007c63 	.word	0x08007c63
 8007aa4:	08007ccd 	.word	0x08007ccd
 8007aa8:	08007d3d 	.word	0x08007d3d
 8007aac:	08007d83 	.word	0x08007d83
 8007ab0:	08007dc9 	.word	0x08007dc9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007ab4:	2108      	movs	r1, #8
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa4c 	bl	8007f54 <USBH_Get_DevDesc>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d12e      	bne.n	8007b24 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7919      	ldrb	r1, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007aea:	9202      	str	r2, [sp, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	9201      	str	r2, [sp, #4]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4603      	mov	r3, r0
 8007af4:	2280      	movs	r2, #128	@ 0x80
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f8dc 	bl	8008cb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7959      	ldrb	r1, [r3, #5]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b10:	9202      	str	r2, [sp, #8]
 8007b12:	2200      	movs	r2, #0
 8007b14:	9201      	str	r2, [sp, #4]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 f8c9 	bl	8008cb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b22:	e173      	b.n	8007e0c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	f040 8170 	bne.w	8007e0c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b32:	3301      	adds	r3, #1
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d903      	bls.n	8007b4e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	220d      	movs	r2, #13
 8007b4a:	701a      	strb	r2, [r3, #0]
      break;
 8007b4c:	e15e      	b.n	8007e0c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	795b      	ldrb	r3, [r3, #5]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 f8fd 	bl	8008d54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	791b      	ldrb	r3, [r3, #4]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f8f7 	bl	8008d54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
      break;
 8007b6c:	e14e      	b.n	8007e0c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b6e:	2112      	movs	r1, #18
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9ef 	bl	8007f54 <USBH_Get_DevDesc>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d103      	bne.n	8007b88 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b86:	e143      	b.n	8007e10 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	f040 8140 	bne.w	8007e10 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b96:	3301      	adds	r3, #1
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d903      	bls.n	8007bb2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	220d      	movs	r2, #13
 8007bae:	701a      	strb	r2, [r3, #0]
      break;
 8007bb0:	e12e      	b.n	8007e10 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	795b      	ldrb	r3, [r3, #5]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 f8cb 	bl	8008d54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f8c5 	bl	8008d54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
      break;
 8007bd6:	e11b      	b.n	8007e10 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007bd8:	2101      	movs	r1, #1
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa79 	bl	80080d2 <USBH_SetAddress>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d130      	bne.n	8007c4c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007bea:	2002      	movs	r0, #2
 8007bec:	f001 fbab 	bl	8009346 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7919      	ldrb	r1, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	9201      	str	r2, [sp, #4]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2280      	movs	r2, #128	@ 0x80
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f848 	bl	8008cb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7959      	ldrb	r1, [r3, #5]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c38:	9202      	str	r2, [sp, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	9201      	str	r2, [sp, #4]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	4603      	mov	r3, r0
 8007c42:	2200      	movs	r2, #0
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f835 	bl	8008cb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c4a:	e0e3      	b.n	8007e14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	f040 80e0 	bne.w	8007e14 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	220d      	movs	r2, #13
 8007c58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	705a      	strb	r2, [r3, #1]
      break;
 8007c60:	e0d8      	b.n	8007e14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c62:	2109      	movs	r1, #9
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f9a1 	bl	8007fac <USBH_Get_CfgDesc>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2204      	movs	r2, #4
 8007c78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c7a:	e0cd      	b.n	8007e18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	f040 80ca 	bne.w	8007e18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d903      	bls.n	8007ca6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	220d      	movs	r2, #13
 8007ca2:	701a      	strb	r2, [r3, #0]
      break;
 8007ca4:	e0b8      	b.n	8007e18 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	795b      	ldrb	r3, [r3, #5]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 f851 	bl	8008d54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	791b      	ldrb	r3, [r3, #4]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f84b 	bl	8008d54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	701a      	strb	r2, [r3, #0]
      break;
 8007cca:	e0a5      	b.n	8007e18 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f969 	bl	8007fac <USBH_Get_CfgDesc>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cea:	e097      	b.n	8007e1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	f040 8094 	bne.w	8007e1c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d903      	bls.n	8007d16 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	220d      	movs	r2, #13
 8007d12:	701a      	strb	r2, [r3, #0]
      break;
 8007d14:	e082      	b.n	8007e1c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	795b      	ldrb	r3, [r3, #5]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f819 	bl	8008d54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	791b      	ldrb	r3, [r3, #4]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f813 	bl	8008d54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	701a      	strb	r2, [r3, #0]
      break;
 8007d3a:	e06f      	b.n	8007e1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d019      	beq.n	8007d7a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d52:	23ff      	movs	r3, #255	@ 0xff
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f953 	bl	8008000 <USBH_Get_StringDesc>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2206      	movs	r2, #6
 8007d68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d6a:	e059      	b.n	8007e20 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d156      	bne.n	8007e20 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2206      	movs	r2, #6
 8007d76:	705a      	strb	r2, [r3, #1]
      break;
 8007d78:	e052      	b.n	8007e20 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2206      	movs	r2, #6
 8007d7e:	705a      	strb	r2, [r3, #1]
      break;
 8007d80:	e04e      	b.n	8007e20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d019      	beq.n	8007dc0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d98:	23ff      	movs	r3, #255	@ 0xff
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f930 	bl	8008000 <USBH_Get_StringDesc>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2207      	movs	r2, #7
 8007dae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007db0:	e038      	b.n	8007e24 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d135      	bne.n	8007e24 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2207      	movs	r2, #7
 8007dbc:	705a      	strb	r2, [r3, #1]
      break;
 8007dbe:	e031      	b.n	8007e24 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2207      	movs	r2, #7
 8007dc4:	705a      	strb	r2, [r3, #1]
      break;
 8007dc6:	e02d      	b.n	8007e24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d017      	beq.n	8007e02 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dde:	23ff      	movs	r3, #255	@ 0xff
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f90d 	bl	8008000 <USBH_Get_StringDesc>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007df4:	e018      	b.n	8007e28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d115      	bne.n	8007e28 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007e00:	e012      	b.n	8007e28 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
      break;
 8007e06:	e00f      	b.n	8007e28 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007e08:	bf00      	nop
 8007e0a:	e00e      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e00c      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e10:	bf00      	nop
 8007e12:	e00a      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e14:	bf00      	nop
 8007e16:	e008      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e18:	bf00      	nop
 8007e1a:	e006      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e004      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <USBH_HandleEnum+0x3b6>
      break;
 8007e28:	bf00      	nop
  }
  return Status;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f804 	bl	8007e76 <USBH_HandleSof>
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b0b      	cmp	r3, #11
 8007e86:	d10a      	bne.n	8007e9e <USBH_HandleSof+0x28>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d005      	beq.n	8007e9e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007eb6:	bf00      	nop
}
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007ed2:	bf00      	nop
}
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 f8be 	bl	80090ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 ff0b 	bl	8008d54 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	795b      	ldrb	r3, [r3, #5]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 ff05 	bl	8008d54 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007f60:	887b      	ldrh	r3, [r7, #2]
 8007f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f66:	d901      	bls.n	8007f6c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e01b      	b.n	8007fa4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f72:	887b      	ldrh	r3, [r7, #2]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4613      	mov	r3, r2
 8007f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f872 	bl	8008068 <USBH_GetDescriptor>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f94:	887a      	ldrh	r2, [r7, #2]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f929 	bl	80081f0 <USBH_ParseDevDesc>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	331c      	adds	r3, #28
 8007fbc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007fbe:	887b      	ldrh	r3, [r7, #2]
 8007fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fc4:	d901      	bls.n	8007fca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e016      	b.n	8007ff8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f846 	bl	8008068 <USBH_GetDescriptor>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d107      	bne.n	8007ff6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9af 	bl	8008350 <USBH_ParseCfgDesc>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	461a      	mov	r2, r3
 800800c:	460b      	mov	r3, r1
 800800e:	72fb      	strb	r3, [r7, #11]
 8008010:	4613      	mov	r3, r2
 8008012:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008014:	893b      	ldrh	r3, [r7, #8]
 8008016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801a:	d802      	bhi.n	8008022 <USBH_Get_StringDesc+0x22>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008022:	2303      	movs	r3, #3
 8008024:	e01c      	b.n	8008060 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008026:	7afb      	ldrb	r3, [r7, #11]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800802e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008036:	893b      	ldrh	r3, [r7, #8]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	460b      	mov	r3, r1
 800803c:	2100      	movs	r1, #0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f812 	bl	8008068 <USBH_GetDescriptor>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d107      	bne.n	800805e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008054:	893a      	ldrh	r2, [r7, #8]
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fb8d 	bl	8008778 <USBH_ParseStringDesc>
  }

  return status;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	607b      	str	r3, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	72fb      	strb	r3, [r7, #11]
 8008076:	4613      	mov	r3, r2
 8008078:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	789b      	ldrb	r3, [r3, #2]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d11c      	bne.n	80080bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008082:	7afb      	ldrb	r3, [r7, #11]
 8008084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008088:	b2da      	uxtb	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2206      	movs	r2, #6
 8008092:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	893a      	ldrh	r2, [r7, #8]
 8008098:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800809a:	893b      	ldrh	r3, [r7, #8]
 800809c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80080a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080a4:	d104      	bne.n	80080b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f240 4209 	movw	r2, #1033	@ 0x409
 80080ac:	829a      	strh	r2, [r3, #20]
 80080ae:	e002      	b.n	80080b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8b3a      	ldrh	r2, [r7, #24]
 80080ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80080bc:	8b3b      	ldrh	r3, [r7, #24]
 80080be:	461a      	mov	r2, r3
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fba5 	bl	8008812 <USBH_CtlReq>
 80080c8:	4603      	mov	r3, r0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	789b      	ldrb	r3, [r3, #2]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10f      	bne.n	8008106 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2205      	movs	r2, #5
 80080f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fb81 	bl	8008812 <USBH_CtlReq>
 8008110:	4603      	mov	r3, r0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	789b      	ldrb	r3, [r3, #2]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d10e      	bne.n	800814c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2209      	movs	r2, #9
 8008138:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	887a      	ldrh	r2, [r7, #2]
 800813e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb5e 	bl	8008812 <USBH_CtlReq>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	789b      	ldrb	r3, [r3, #2]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10f      	bne.n	8008194 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2203      	movs	r2, #3
 800817e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008194:	2200      	movs	r2, #0
 8008196:	2100      	movs	r1, #0
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fb3a 	bl	8008812 <USBH_CtlReq>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	789b      	ldrb	r3, [r3, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d10f      	bne.n	80081dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081dc:	2200      	movs	r2, #0
 80081de:	2100      	movs	r1, #0
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb16 	bl	8008812 <USBH_CtlReq>
 80081e6:	4603      	mov	r3, r0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008204:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008210:	2302      	movs	r3, #2
 8008212:	e094      	b.n	800833e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	781a      	ldrb	r2, [r3, #0]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	785a      	ldrb	r2, [r3, #1]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3302      	adds	r3, #2
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	3303      	adds	r3, #3
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b29b      	uxth	r3, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	b29a      	uxth	r2, r3
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	791a      	ldrb	r2, [r3, #4]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	795a      	ldrb	r2, [r3, #5]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	799a      	ldrb	r2, [r3, #6]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	79da      	ldrb	r2, [r3, #7]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800826e:	2b01      	cmp	r3, #1
 8008270:	d11b      	bne.n	80082aa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	79db      	ldrb	r3, [r3, #7]
 8008276:	2b20      	cmp	r3, #32
 8008278:	dc0f      	bgt.n	800829a <USBH_ParseDevDesc+0xaa>
 800827a:	2b08      	cmp	r3, #8
 800827c:	db0f      	blt.n	800829e <USBH_ParseDevDesc+0xae>
 800827e:	3b08      	subs	r3, #8
 8008280:	4a32      	ldr	r2, [pc, #200]	@ (800834c <USBH_ParseDevDesc+0x15c>)
 8008282:	fa22 f303 	lsr.w	r3, r2, r3
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	bf14      	ite	ne
 800828e:	2301      	movne	r3, #1
 8008290:	2300      	moveq	r3, #0
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <USBH_ParseDevDesc+0xb6>
 8008298:	e001      	b.n	800829e <USBH_ParseDevDesc+0xae>
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d003      	beq.n	80082a6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2208      	movs	r2, #8
 80082a2:	71da      	strb	r2, [r3, #7]
        break;
 80082a4:	e000      	b.n	80082a8 <USBH_ParseDevDesc+0xb8>
        break;
 80082a6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80082a8:	e00e      	b.n	80082c8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d107      	bne.n	80082c4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	79db      	ldrb	r3, [r3, #7]
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d005      	beq.n	80082c8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2208      	movs	r2, #8
 80082c0:	71da      	strb	r2, [r3, #7]
 80082c2:	e001      	b.n	80082c8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80082c4:	2303      	movs	r3, #3
 80082c6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	d936      	bls.n	800833c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	3308      	adds	r3, #8
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3309      	adds	r3, #9
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	b29b      	uxth	r3, r3
 80082e0:	4313      	orrs	r3, r2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	330a      	adds	r3, #10
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	330b      	adds	r3, #11
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	4313      	orrs	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	330c      	adds	r3, #12
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	330d      	adds	r3, #13
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b29b      	uxth	r3, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	7b9a      	ldrb	r2, [r3, #14]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	7bda      	ldrb	r2, [r3, #15]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	7c1a      	ldrb	r2, [r3, #16]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	7c5a      	ldrb	r2, [r3, #17]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	01000101 	.word	0x01000101

08008350 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08c      	sub	sp, #48	@ 0x30
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008364:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800837e:	2302      	movs	r3, #2
 8008380:	e0da      	b.n	8008538 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	781a      	ldrb	r2, [r3, #0]
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	785a      	ldrb	r2, [r3, #1]
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	3302      	adds	r3, #2
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	3303      	adds	r3, #3
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	4313      	orrs	r3, r2
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b0:	bf28      	it	cs
 80083b2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	791a      	ldrb	r2, [r3, #4]
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	795a      	ldrb	r2, [r3, #5]
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	799a      	ldrb	r2, [r3, #6]
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	79da      	ldrb	r2, [r3, #7]
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	7a1a      	ldrb	r2, [r3, #8]
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b09      	cmp	r3, #9
 80083ea:	d002      	beq.n	80083f2 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	2209      	movs	r2, #9
 80083f0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	f240 809d 	bls.w	8008534 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80083fa:	2309      	movs	r3, #9
 80083fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008402:	e081      	b.n	8008508 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008404:	f107 0316 	add.w	r3, r7, #22
 8008408:	4619      	mov	r1, r3
 800840a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800840c:	f000 f9e7 	bl	80087de <USBH_GetNextDesc>
 8008410:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b04      	cmp	r3, #4
 8008418:	d176      	bne.n	8008508 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b09      	cmp	r3, #9
 8008420:	d002      	beq.n	8008428 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	2209      	movs	r2, #9
 8008426:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800842c:	221a      	movs	r2, #26
 800842e:	fb02 f303 	mul.w	r3, r2, r3
 8008432:	3308      	adds	r3, #8
 8008434:	6a3a      	ldr	r2, [r7, #32]
 8008436:	4413      	add	r3, r2
 8008438:	3302      	adds	r3, #2
 800843a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800843c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800843e:	69f8      	ldr	r0, [r7, #28]
 8008440:	f000 f87e 	bl	8008540 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800844e:	e043      	b.n	80084d8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008450:	f107 0316 	add.w	r3, r7, #22
 8008454:	4619      	mov	r1, r3
 8008456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008458:	f000 f9c1 	bl	80087de <USBH_GetNextDesc>
 800845c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	2b05      	cmp	r3, #5
 8008464:	d138      	bne.n	80084d8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	795b      	ldrb	r3, [r3, #5]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d113      	bne.n	8008496 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008472:	2b02      	cmp	r3, #2
 8008474:	d003      	beq.n	800847e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	799b      	ldrb	r3, [r3, #6]
 800847a:	2b03      	cmp	r3, #3
 800847c:	d10b      	bne.n	8008496 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	79db      	ldrb	r3, [r3, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10b      	bne.n	800849e <USBH_ParseCfgDesc+0x14e>
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b09      	cmp	r3, #9
 800848c:	d007      	beq.n	800849e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	2209      	movs	r2, #9
 8008492:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008494:	e003      	b.n	800849e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	2207      	movs	r2, #7
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e000      	b.n	80084a0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800849e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80084a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084a8:	3201      	adds	r2, #1
 80084aa:	00d2      	lsls	r2, r2, #3
 80084ac:	211a      	movs	r1, #26
 80084ae:	fb01 f303 	mul.w	r3, r1, r3
 80084b2:	4413      	add	r3, r2
 80084b4:	3308      	adds	r3, #8
 80084b6:	6a3a      	ldr	r2, [r7, #32]
 80084b8:	4413      	add	r3, r2
 80084ba:	3304      	adds	r3, #4
 80084bc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80084be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084c0:	69b9      	ldr	r1, [r7, #24]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 f870 	bl	80085a8 <USBH_ParseEPDesc>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80084ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084d2:	3301      	adds	r3, #1
 80084d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d204      	bcs.n	80084ee <USBH_ParseCfgDesc+0x19e>
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	885a      	ldrh	r2, [r3, #2]
 80084e8:	8afb      	ldrh	r3, [r7, #22]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d8b0      	bhi.n	8008450 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	791b      	ldrb	r3, [r3, #4]
 80084f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d201      	bcs.n	80084fe <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e01c      	b.n	8008538 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80084fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008502:	3301      	adds	r3, #1
 8008504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800850c:	2b01      	cmp	r3, #1
 800850e:	d805      	bhi.n	800851c <USBH_ParseCfgDesc+0x1cc>
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	885a      	ldrh	r2, [r3, #2]
 8008514:	8afb      	ldrh	r3, [r7, #22]
 8008516:	429a      	cmp	r2, r3
 8008518:	f63f af74 	bhi.w	8008404 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	791b      	ldrb	r3, [r3, #4]
 8008520:	2b02      	cmp	r3, #2
 8008522:	bf28      	it	cs
 8008524:	2302      	movcs	r3, #2
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800852c:	429a      	cmp	r2, r3
 800852e:	d201      	bcs.n	8008534 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008530:	2303      	movs	r3, #3
 8008532:	e001      	b.n	8008538 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008538:	4618      	mov	r0, r3
 800853a:	3730      	adds	r7, #48	@ 0x30
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785a      	ldrb	r2, [r3, #1]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	789a      	ldrb	r2, [r3, #2]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	78da      	ldrb	r2, [r3, #3]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	3304      	adds	r3, #4
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b02      	cmp	r3, #2
 8008572:	bf28      	it	cs
 8008574:	2302      	movcs	r3, #2
 8008576:	b2da      	uxtb	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	795a      	ldrb	r2, [r3, #5]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	799a      	ldrb	r2, [r3, #6]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	79da      	ldrb	r2, [r3, #7]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	7a1a      	ldrb	r2, [r3, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	721a      	strb	r2, [r3, #8]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	785a      	ldrb	r2, [r3, #1]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	789a      	ldrb	r2, [r3, #2]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	78da      	ldrb	r2, [r3, #3]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3304      	adds	r3, #4
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3305      	adds	r3, #5
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	4313      	orrs	r3, r2
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	799a      	ldrb	r2, [r3, #6]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	889b      	ldrh	r3, [r3, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800860a:	d804      	bhi.n	8008616 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008614:	d901      	bls.n	800861a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008620:	2b00      	cmp	r3, #0
 8008622:	d136      	bne.n	8008692 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	78db      	ldrb	r3, [r3, #3]
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d108      	bne.n	8008642 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	889b      	ldrh	r3, [r3, #4]
 8008634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008638:	f240 8097 	bls.w	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800863c:	2303      	movs	r3, #3
 800863e:	75fb      	strb	r3, [r7, #23]
 8008640:	e093      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d107      	bne.n	800865e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	889b      	ldrh	r3, [r3, #4]
 8008652:	2b40      	cmp	r3, #64	@ 0x40
 8008654:	f240 8089 	bls.w	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008658:	2303      	movs	r3, #3
 800865a:	75fb      	strb	r3, [r7, #23]
 800865c:	e085      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	78db      	ldrb	r3, [r3, #3]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b01      	cmp	r3, #1
 8008668:	d005      	beq.n	8008676 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	78db      	ldrb	r3, [r3, #3]
 800866e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008672:	2b03      	cmp	r3, #3
 8008674:	d10a      	bne.n	800868c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	799b      	ldrb	r3, [r3, #6]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <USBH_ParseEPDesc+0xde>
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	799b      	ldrb	r3, [r3, #6]
 8008682:	2b10      	cmp	r3, #16
 8008684:	d970      	bls.n	8008768 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008686:	2303      	movs	r3, #3
 8008688:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800868a:	e06d      	b.n	8008768 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800868c:	2303      	movs	r3, #3
 800868e:	75fb      	strb	r3, [r7, #23]
 8008690:	e06b      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008698:	2b01      	cmp	r3, #1
 800869a:	d13c      	bne.n	8008716 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	78db      	ldrb	r3, [r3, #3]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d005      	beq.n	80086b4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	78db      	ldrb	r3, [r3, #3]
 80086ac:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	889b      	ldrh	r3, [r3, #4]
 80086b8:	2b40      	cmp	r3, #64	@ 0x40
 80086ba:	d956      	bls.n	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086bc:	2303      	movs	r3, #3
 80086be:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086c0:	e053      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	78db      	ldrb	r3, [r3, #3]
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d10e      	bne.n	80086ec <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	799b      	ldrb	r3, [r3, #6]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80086da:	2b10      	cmp	r3, #16
 80086dc:	d803      	bhi.n	80086e6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80086e2:	2b40      	cmp	r3, #64	@ 0x40
 80086e4:	d941      	bls.n	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e6:	2303      	movs	r3, #3
 80086e8:	75fb      	strb	r3, [r7, #23]
 80086ea:	e03e      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	78db      	ldrb	r3, [r3, #3]
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d10b      	bne.n	8008710 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	799b      	ldrb	r3, [r3, #6]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <USBH_ParseEPDesc+0x162>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	889b      	ldrh	r3, [r3, #4]
 8008704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008708:	d32f      	bcc.n	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800870a:	2303      	movs	r3, #3
 800870c:	75fb      	strb	r3, [r7, #23]
 800870e:	e02c      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008710:	2303      	movs	r3, #3
 8008712:	75fb      	strb	r3, [r7, #23]
 8008714:	e029      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800871c:	2b02      	cmp	r3, #2
 800871e:	d120      	bne.n	8008762 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	78db      	ldrb	r3, [r3, #3]
 8008724:	f003 0303 	and.w	r3, r3, #3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	889b      	ldrh	r3, [r3, #4]
 8008730:	2b08      	cmp	r3, #8
 8008732:	d01a      	beq.n	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008734:	2303      	movs	r3, #3
 8008736:	75fb      	strb	r3, [r7, #23]
 8008738:	e017      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	78db      	ldrb	r3, [r3, #3]
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	2b03      	cmp	r3, #3
 8008744:	d10a      	bne.n	800875c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	799b      	ldrb	r3, [r3, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <USBH_ParseEPDesc+0x1ae>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	889b      	ldrh	r3, [r3, #4]
 8008752:	2b08      	cmp	r3, #8
 8008754:	d909      	bls.n	800876a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008756:	2303      	movs	r3, #3
 8008758:	75fb      	strb	r3, [r7, #23]
 800875a:	e006      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800875c:	2303      	movs	r3, #3
 800875e:	75fb      	strb	r3, [r7, #23]
 8008760:	e003      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008762:	2303      	movs	r3, #3
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e000      	b.n	800876a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008768:	bf00      	nop
  }

  return status;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d120      	bne.n	80087d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	1e9a      	subs	r2, r3, #2
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	4293      	cmp	r3, r2
 800879a:	bf28      	it	cs
 800879c:	4613      	movcs	r3, r2
 800879e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3302      	adds	r3, #2
 80087a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087a6:	2300      	movs	r3, #0
 80087a8:	82fb      	strh	r3, [r7, #22]
 80087aa:	e00b      	b.n	80087c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087ac:	8afb      	ldrh	r3, [r7, #22]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4413      	add	r3, r2
 80087b2:	781a      	ldrb	r2, [r3, #0]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087be:	8afb      	ldrh	r3, [r7, #22]
 80087c0:	3302      	adds	r3, #2
 80087c2:	82fb      	strh	r3, [r7, #22]
 80087c4:	8afa      	ldrh	r2, [r7, #22]
 80087c6:	8abb      	ldrh	r3, [r7, #20]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d3ef      	bcc.n	80087ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
  }
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	4413      	add	r3, r2
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008804:	68fb      	ldr	r3, [r7, #12]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b086      	sub	sp, #24
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	4613      	mov	r3, r2
 800881e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	789b      	ldrb	r3, [r3, #2]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d002      	beq.n	8008832 <USBH_CtlReq+0x20>
 800882c:	2b02      	cmp	r3, #2
 800882e:	d00f      	beq.n	8008850 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008830:	e027      	b.n	8008882 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	88fa      	ldrh	r2, [r7, #6]
 800883c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2202      	movs	r2, #2
 8008848:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
      break;
 800884e:	e018      	b.n	8008882 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f81b 	bl	800888c <USBH_HandleControl>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <USBH_CtlReq+0x54>
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	2b03      	cmp	r3, #3
 8008864:	d106      	bne.n	8008874 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	761a      	strb	r2, [r3, #24]
      break;
 8008872:	e005      	b.n	8008880 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d102      	bne.n	8008880 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	709a      	strb	r2, [r3, #2]
      break;
 8008880:	bf00      	nop
  }
  return status;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af02      	add	r7, sp, #8
 8008892:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008898:	2300      	movs	r3, #0
 800889a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7e1b      	ldrb	r3, [r3, #24]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	2b0a      	cmp	r3, #10
 80088a4:	f200 8156 	bhi.w	8008b54 <USBH_HandleControl+0x2c8>
 80088a8:	a201      	add	r2, pc, #4	@ (adr r2, 80088b0 <USBH_HandleControl+0x24>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	080088f7 	.word	0x080088f7
 80088b8:	08008961 	.word	0x08008961
 80088bc:	08008987 	.word	0x08008987
 80088c0:	080089bf 	.word	0x080089bf
 80088c4:	080089e9 	.word	0x080089e9
 80088c8:	08008a3b 	.word	0x08008a3b
 80088cc:	08008a5d 	.word	0x08008a5d
 80088d0:	08008a99 	.word	0x08008a99
 80088d4:	08008abf 	.word	0x08008abf
 80088d8:	08008afd 	.word	0x08008afd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f103 0110 	add.w	r1, r3, #16
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	795b      	ldrb	r3, [r3, #5]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f943 	bl	8008b74 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2202      	movs	r2, #2
 80088f2:	761a      	strb	r2, [r3, #24]
      break;
 80088f4:	e139      	b.n	8008b6a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	795b      	ldrb	r3, [r3, #5]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fcc5 	bl	800928c <USBH_LL_GetURBState>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d11e      	bne.n	800894a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	7c1b      	ldrb	r3, [r3, #16]
 8008910:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008914:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8adb      	ldrh	r3, [r3, #22]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800891e:	7b7b      	ldrb	r3, [r7, #13]
 8008920:	2b80      	cmp	r3, #128	@ 0x80
 8008922:	d103      	bne.n	800892c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2203      	movs	r2, #3
 8008928:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800892a:	e115      	b.n	8008b58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2205      	movs	r2, #5
 8008930:	761a      	strb	r2, [r3, #24]
      break;
 8008932:	e111      	b.n	8008b58 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008934:	7b7b      	ldrb	r3, [r7, #13]
 8008936:	2b80      	cmp	r3, #128	@ 0x80
 8008938:	d103      	bne.n	8008942 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2209      	movs	r2, #9
 800893e:	761a      	strb	r2, [r3, #24]
      break;
 8008940:	e10a      	b.n	8008b58 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2207      	movs	r2, #7
 8008946:	761a      	strb	r2, [r3, #24]
      break;
 8008948:	e106      	b.n	8008b58 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b04      	cmp	r3, #4
 800894e:	d003      	beq.n	8008958 <USBH_HandleControl+0xcc>
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	2b02      	cmp	r3, #2
 8008954:	f040 8100 	bne.w	8008b58 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	220b      	movs	r2, #11
 800895c:	761a      	strb	r2, [r3, #24]
      break;
 800895e:	e0fb      	b.n	8008b58 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008966:	b29a      	uxth	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6899      	ldr	r1, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	899a      	ldrh	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f93a 	bl	8008bf2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2204      	movs	r2, #4
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e0f1      	b.n	8008b6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	791b      	ldrb	r3, [r3, #4]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc7d 	bl	800928c <USBH_LL_GetURBState>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d102      	bne.n	80089a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2209      	movs	r2, #9
 80089a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d102      	bne.n	80089ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089a8:	2303      	movs	r3, #3
 80089aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089ac:	e0d6      	b.n	8008b5c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	f040 80d3 	bne.w	8008b5c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	220b      	movs	r2, #11
 80089ba:	761a      	strb	r2, [r3, #24]
      break;
 80089bc:	e0ce      	b.n	8008b5c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6899      	ldr	r1, [r3, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	899a      	ldrh	r2, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	795b      	ldrb	r3, [r3, #5]
 80089ca:	2001      	movs	r0, #1
 80089cc:	9000      	str	r0, [sp, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f8ea 	bl	8008ba8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2206      	movs	r2, #6
 80089e4:	761a      	strb	r2, [r3, #24]
      break;
 80089e6:	e0c0      	b.n	8008b6a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	795b      	ldrb	r3, [r3, #5]
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fc4c 	bl	800928c <USBH_LL_GetURBState>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d103      	bne.n	8008a06 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2207      	movs	r2, #7
 8008a02:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a04:	e0ac      	b.n	8008b60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d105      	bne.n	8008a18 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	220c      	movs	r2, #12
 8008a10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a12:	2303      	movs	r3, #3
 8008a14:	73fb      	strb	r3, [r7, #15]
      break;
 8008a16:	e0a3      	b.n	8008b60 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d103      	bne.n	8008a26 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2205      	movs	r2, #5
 8008a22:	761a      	strb	r2, [r3, #24]
      break;
 8008a24:	e09c      	b.n	8008b60 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	f040 8099 	bne.w	8008b60 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	220b      	movs	r2, #11
 8008a32:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a34:	2302      	movs	r3, #2
 8008a36:	73fb      	strb	r3, [r7, #15]
      break;
 8008a38:	e092      	b.n	8008b60 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	791b      	ldrb	r3, [r3, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2100      	movs	r1, #0
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f8d5 	bl	8008bf2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2208      	movs	r2, #8
 8008a58:	761a      	strb	r2, [r3, #24]

      break;
 8008a5a:	e086      	b.n	8008b6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	791b      	ldrb	r3, [r3, #4]
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fc12 	bl	800928c <USBH_LL_GetURBState>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d105      	bne.n	8008a7e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	220d      	movs	r2, #13
 8008a76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a7c:	e072      	b.n	8008b64 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d103      	bne.n	8008a8c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	220b      	movs	r2, #11
 8008a88:	761a      	strb	r2, [r3, #24]
      break;
 8008a8a:	e06b      	b.n	8008b64 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d168      	bne.n	8008b64 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
      break;
 8008a96:	e065      	b.n	8008b64 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	795b      	ldrb	r3, [r3, #5]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	9200      	str	r2, [sp, #0]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f87f 	bl	8008ba8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	220a      	movs	r2, #10
 8008aba:	761a      	strb	r2, [r3, #24]
      break;
 8008abc:	e055      	b.n	8008b6a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	795b      	ldrb	r3, [r3, #5]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fbe1 	bl	800928c <USBH_LL_GetURBState>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d105      	bne.n	8008ae0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	220d      	movs	r2, #13
 8008adc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ade:	e043      	b.n	8008b68 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d103      	bne.n	8008aee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2209      	movs	r2, #9
 8008aea:	761a      	strb	r2, [r3, #24]
      break;
 8008aec:	e03c      	b.n	8008b68 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d139      	bne.n	8008b68 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	220b      	movs	r2, #11
 8008af8:	761a      	strb	r2, [r3, #24]
      break;
 8008afa:	e035      	b.n	8008b68 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7e5b      	ldrb	r3, [r3, #25]
 8008b00:	3301      	adds	r3, #1
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	765a      	strb	r2, [r3, #25]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7e5b      	ldrb	r3, [r3, #25]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d806      	bhi.n	8008b1e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b1c:	e025      	b.n	8008b6a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b24:	2106      	movs	r1, #6
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	795b      	ldrb	r3, [r3, #5]
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f90c 	bl	8008d54 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	791b      	ldrb	r3, [r3, #4]
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f906 	bl	8008d54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]
      break;
 8008b52:	e00a      	b.n	8008b6a <USBH_HandleControl+0x2de>

    default:
      break;
 8008b54:	bf00      	nop
 8008b56:	e008      	b.n	8008b6a <USBH_HandleControl+0x2de>
      break;
 8008b58:	bf00      	nop
 8008b5a:	e006      	b.n	8008b6a <USBH_HandleControl+0x2de>
      break;
 8008b5c:	bf00      	nop
 8008b5e:	e004      	b.n	8008b6a <USBH_HandleControl+0x2de>
      break;
 8008b60:	bf00      	nop
 8008b62:	e002      	b.n	8008b6a <USBH_HandleControl+0x2de>
      break;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <USBH_HandleControl+0x2de>
      break;
 8008b68:	bf00      	nop
  }

  return status;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b82:	79f9      	ldrb	r1, [r7, #7]
 8008b84:	2300      	movs	r3, #0
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	2308      	movs	r3, #8
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	2300      	movs	r3, #0
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2300      	movs	r3, #0
 8008b96:	2200      	movs	r2, #0
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fb46 	bl	800922a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af04      	add	r7, sp, #16
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	80fb      	strh	r3, [r7, #6]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bcc:	7979      	ldrb	r1, [r7, #5]
 8008bce:	7e3b      	ldrb	r3, [r7, #24]
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	2300      	movs	r3, #0
 8008be0:	2200      	movs	r2, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fb21 	bl	800922a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b088      	sub	sp, #32
 8008bf6:	af04      	add	r7, sp, #16
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	461a      	mov	r2, r3
 8008c00:	460b      	mov	r3, r1
 8008c02:	80fb      	strh	r3, [r7, #6]
 8008c04:	4613      	mov	r3, r2
 8008c06:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c08:	7979      	ldrb	r1, [r7, #5]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fb03 	bl	800922a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c24:	2300      	movs	r3, #0

}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af04      	add	r7, sp, #16
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	80fb      	strh	r3, [r7, #6]
 8008c40:	4613      	mov	r3, r2
 8008c42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c52:	7979      	ldrb	r1, [r7, #5]
 8008c54:	7e3b      	ldrb	r3, [r7, #24]
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	2301      	movs	r3, #1
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2302      	movs	r3, #2
 8008c66:	2200      	movs	r2, #0
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fade 	bl	800922a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af04      	add	r7, sp, #16
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	4611      	mov	r1, r2
 8008c84:	461a      	mov	r2, r3
 8008c86:	460b      	mov	r3, r1
 8008c88:	80fb      	strh	r3, [r7, #6]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c8e:	7979      	ldrb	r1, [r7, #5]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fac0 	bl	800922a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	70fb      	strb	r3, [r7, #3]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70bb      	strb	r3, [r7, #2]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008cce:	7878      	ldrb	r0, [r7, #1]
 8008cd0:	78ba      	ldrb	r2, [r7, #2]
 8008cd2:	78f9      	ldrb	r1, [r7, #3]
 8008cd4:	8b3b      	ldrh	r3, [r7, #24]
 8008cd6:	9302      	str	r3, [sp, #8]
 8008cd8:	7d3b      	ldrb	r3, [r7, #20]
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	7c3b      	ldrb	r3, [r7, #16]
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa53 	bl	800918e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa72 	bl	80091ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f836 	bl	8008d90 <USBH_GetFreePipe>
 8008d24:	4603      	mov	r3, r0
 8008d26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d28:	89fb      	ldrh	r3, [r7, #14]
 8008d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00a      	beq.n	8008d48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	89fb      	ldrh	r3, [r7, #14]
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	33e0      	adds	r3, #224	@ 0xe0
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d48:	89fb      	ldrh	r3, [r7, #14]
 8008d4a:	b2db      	uxtb	r3, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	2b0f      	cmp	r3, #15
 8008d64:	d80d      	bhi.n	8008d82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	33e0      	adds	r3, #224	@ 0xe0
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	33e0      	adds	r3, #224	@ 0xe0
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e00f      	b.n	8008dc2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	33e0      	adds	r3, #224	@ 0xe0
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	e007      	b.n	8008dcc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	73fb      	strb	r3, [r7, #15]
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	2b0f      	cmp	r3, #15
 8008dc6:	d9ec      	bls.n	8008da2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	490e      	ldr	r1, [pc, #56]	@ (8008e18 <MX_USB_HOST_Init+0x40>)
 8008de0:	480e      	ldr	r0, [pc, #56]	@ (8008e1c <MX_USB_HOST_Init+0x44>)
 8008de2:	f7fe fb15 	bl	8007410 <USBH_Init>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008dec:	f7f7 fde4 	bl	80009b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008df0:	490b      	ldr	r1, [pc, #44]	@ (8008e20 <MX_USB_HOST_Init+0x48>)
 8008df2:	480a      	ldr	r0, [pc, #40]	@ (8008e1c <MX_USB_HOST_Init+0x44>)
 8008df4:	f7fe fbb9 	bl	800756a <USBH_RegisterClass>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008dfe:	f7f7 fddb 	bl	80009b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e02:	4806      	ldr	r0, [pc, #24]	@ (8008e1c <MX_USB_HOST_Init+0x44>)
 8008e04:	f7fe fc3d 	bl	8007682 <USBH_Start>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e0e:	f7f7 fdd3 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e12:	bf00      	nop
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	08008e39 	.word	0x08008e39
 8008e1c:	200001e0 	.word	0x200001e0
 8008e20:	2000000c 	.word	0x2000000c

08008e24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e28:	4802      	ldr	r0, [pc, #8]	@ (8008e34 <MX_USB_HOST_Process+0x10>)
 8008e2a:	f7fe fc3b 	bl	80076a4 <USBH_Process>
}
 8008e2e:	bf00      	nop
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200001e0 	.word	0x200001e0

08008e38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d819      	bhi.n	8008e80 <USBH_UserProcess+0x48>
 8008e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e54 <USBH_UserProcess+0x1c>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e81 	.word	0x08008e81
 8008e58:	08008e71 	.word	0x08008e71
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e79 	.word	0x08008e79
 8008e64:	08008e69 	.word	0x08008e69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e68:	4b09      	ldr	r3, [pc, #36]	@ (8008e90 <USBH_UserProcess+0x58>)
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	701a      	strb	r2, [r3, #0]
  break;
 8008e6e:	e008      	b.n	8008e82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e70:	4b07      	ldr	r3, [pc, #28]	@ (8008e90 <USBH_UserProcess+0x58>)
 8008e72:	2202      	movs	r2, #2
 8008e74:	701a      	strb	r2, [r3, #0]
  break;
 8008e76:	e004      	b.n	8008e82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <USBH_UserProcess+0x58>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	701a      	strb	r2, [r3, #0]
  break;
 8008e7e:	e000      	b.n	8008e82 <USBH_UserProcess+0x4a>

  default:
  break;
 8008e80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	200005b8 	.word	0x200005b8

08008e94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08a      	sub	sp, #40	@ 0x28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	605a      	str	r2, [r3, #4]
 8008ea6:	609a      	str	r2, [r3, #8]
 8008ea8:	60da      	str	r2, [r3, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eb4:	d147      	bne.n	8008f46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	4b25      	ldr	r3, [pc, #148]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ebe:	4a24      	ldr	r2, [pc, #144]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ec6:	4b22      	ldr	r3, [pc, #136]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	613b      	str	r3, [r7, #16]
 8008ed0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ee0:	f107 0314 	add.w	r3, r7, #20
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	481b      	ldr	r0, [pc, #108]	@ (8008f54 <HAL_HCD_MspInit+0xc0>)
 8008ee8:	f7f8 fe86 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008eec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008efa:	2300      	movs	r3, #0
 8008efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008efe:	230a      	movs	r3, #10
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f02:	f107 0314 	add.w	r3, r7, #20
 8008f06:	4619      	mov	r1, r3
 8008f08:	4812      	ldr	r0, [pc, #72]	@ (8008f54 <HAL_HCD_MspInit+0xc0>)
 8008f0a:	f7f8 fe75 	bl	8001bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f0e:	4b10      	ldr	r3, [pc, #64]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f12:	4a0f      	ldr	r2, [pc, #60]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f18:	6353      	str	r3, [r2, #52]	@ 0x34
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f22:	4a0b      	ldr	r2, [pc, #44]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f2a:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <HAL_HCD_MspInit+0xbc>)
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f36:	2200      	movs	r2, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	2043      	movs	r0, #67	@ 0x43
 8008f3c:	f7f8 fe25 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f40:	2043      	movs	r0, #67	@ 0x43
 8008f42:	f7f8 fe3e 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f46:	bf00      	nop
 8008f48:	3728      	adds	r7, #40	@ 0x28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40023800 	.word	0x40023800
 8008f54:	40020000 	.word	0x40020000

08008f58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe ff73 	bl	8007e52 <USBH_LL_IncTimer>
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe ffab 	bl	8007ede <USBH_LL_Connect>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe ffb4 	bl	8007f0c <USBH_LL_Disconnect>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe ff65 	bl	8007ea6 <USBH_LL_PortEnabled>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe ff65 	bl	8007ec2 <USBH_LL_PortDisabled>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800900e:	2b01      	cmp	r3, #1
 8009010:	d12a      	bne.n	8009068 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009012:	4a18      	ldr	r2, [pc, #96]	@ (8009074 <USBH_LL_Init+0x74>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a15      	ldr	r2, [pc, #84]	@ (8009074 <USBH_LL_Init+0x74>)
 800901e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009022:	4b14      	ldr	r3, [pc, #80]	@ (8009074 <USBH_LL_Init+0x74>)
 8009024:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009028:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800902a:	4b12      	ldr	r3, [pc, #72]	@ (8009074 <USBH_LL_Init+0x74>)
 800902c:	2208      	movs	r2, #8
 800902e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009030:	4b10      	ldr	r3, [pc, #64]	@ (8009074 <USBH_LL_Init+0x74>)
 8009032:	2201      	movs	r2, #1
 8009034:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009036:	4b0f      	ldr	r3, [pc, #60]	@ (8009074 <USBH_LL_Init+0x74>)
 8009038:	2200      	movs	r2, #0
 800903a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800903c:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <USBH_LL_Init+0x74>)
 800903e:	2202      	movs	r2, #2
 8009040:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009042:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <USBH_LL_Init+0x74>)
 8009044:	2200      	movs	r2, #0
 8009046:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009048:	480a      	ldr	r0, [pc, #40]	@ (8009074 <USBH_LL_Init+0x74>)
 800904a:	f7f8 ff8a 	bl	8001f62 <HAL_HCD_Init>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009054:	f7f7 fcb0 	bl	80009b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009058:	4806      	ldr	r0, [pc, #24]	@ (8009074 <USBH_LL_Init+0x74>)
 800905a:	f7f9 fbeb 	bl	8002834 <HAL_HCD_GetCurrentFrame>
 800905e:	4603      	mov	r3, r0
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7fe fee6 	bl	8007e34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	200005bc 	.word	0x200005bc

08009078 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800908e:	4618      	mov	r0, r3
 8009090:	f7f9 fb58 	bl	8002744 <HAL_HCD_Start>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f95e 	bl	800935c <USBH_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7f9 fb60 	bl	800278a <HAL_HCD_Stop>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 f943 	bl	800935c <USBH_Get_USB_Status>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090da:	7bbb      	ldrb	r3, [r7, #14]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80090ec:	2301      	movs	r3, #1
 80090ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7f9 fbaa 	bl	8002850 <HAL_HCD_GetCurrentSpeed>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d00c      	beq.n	800911c <USBH_LL_GetSpeed+0x38>
 8009102:	2b02      	cmp	r3, #2
 8009104:	d80d      	bhi.n	8009122 <USBH_LL_GetSpeed+0x3e>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <USBH_LL_GetSpeed+0x2c>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d003      	beq.n	8009116 <USBH_LL_GetSpeed+0x32>
 800910e:	e008      	b.n	8009122 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
    break;
 8009114:	e008      	b.n	8009128 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
    break;
 800911a:	e005      	b.n	8009128 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800911c:	2302      	movs	r3, #2
 800911e:	73fb      	strb	r3, [r7, #15]
    break;
 8009120:	e002      	b.n	8009128 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
    break;
 8009126:	bf00      	nop
  }
  return  speed;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009148:	4618      	mov	r0, r3
 800914a:	f7f9 fb3b 	bl	80027c4 <HAL_HCD_ResetPort>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f901 	bl	800935c <USBH_Get_USB_Status>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7f9 fb43 	bl	800280a <HAL_HCD_HC_GetXferCount>
 8009184:	4603      	mov	r3, r0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800918e:	b590      	push	{r4, r7, lr}
 8009190:	b089      	sub	sp, #36	@ 0x24
 8009192:	af04      	add	r7, sp, #16
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	4608      	mov	r0, r1
 8009198:	4611      	mov	r1, r2
 800919a:	461a      	mov	r2, r3
 800919c:	4603      	mov	r3, r0
 800919e:	70fb      	strb	r3, [r7, #3]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70bb      	strb	r3, [r7, #2]
 80091a4:	4613      	mov	r3, r2
 80091a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80091b6:	787c      	ldrb	r4, [r7, #1]
 80091b8:	78ba      	ldrb	r2, [r7, #2]
 80091ba:	78f9      	ldrb	r1, [r7, #3]
 80091bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80091be:	9302      	str	r3, [sp, #8]
 80091c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	4623      	mov	r3, r4
 80091ce:	f7f8 ff2f 	bl	8002030 <HAL_HCD_HC_Init>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 f8bf 	bl	800935c <USBH_Get_USB_Status>
 80091de:	4603      	mov	r3, r0
 80091e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7f8 ffc8 	bl	80021a0 <HAL_HCD_HC_Halt>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f8a0 	bl	800935c <USBH_Get_USB_Status>
 800921c:	4603      	mov	r3, r0
 800921e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009220:	7bbb      	ldrb	r3, [r7, #14]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800922a:	b590      	push	{r4, r7, lr}
 800922c:	b089      	sub	sp, #36	@ 0x24
 800922e:	af04      	add	r7, sp, #16
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	461a      	mov	r2, r3
 8009238:	4603      	mov	r3, r0
 800923a:	70fb      	strb	r3, [r7, #3]
 800923c:	460b      	mov	r3, r1
 800923e:	70bb      	strb	r3, [r7, #2]
 8009240:	4613      	mov	r3, r2
 8009242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009252:	787c      	ldrb	r4, [r7, #1]
 8009254:	78ba      	ldrb	r2, [r7, #2]
 8009256:	78f9      	ldrb	r1, [r7, #3]
 8009258:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800925c:	9303      	str	r3, [sp, #12]
 800925e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009260:	9302      	str	r3, [sp, #8]
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4623      	mov	r3, r4
 800926e:	f7f8 ffbb 	bl	80021e8 <HAL_HCD_HC_SubmitRequest>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 f86f 	bl	800935c <USBH_Get_USB_Status>
 800927e:	4603      	mov	r3, r0
 8009280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009282:	7bbb      	ldrb	r3, [r7, #14]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	bd90      	pop	{r4, r7, pc}

0800928c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800929e:	78fa      	ldrb	r2, [r7, #3]
 80092a0:	4611      	mov	r1, r2
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f9 fa9c 	bl	80027e0 <HAL_HCD_HC_GetURBState>
 80092a8:	4603      	mov	r3, r0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d103      	bne.n	80092d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f872 	bl	80093b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80092d0:	20c8      	movs	r0, #200	@ 0xc8
 80092d2:	f7f7 fe23 	bl	8000f1c <HAL_Delay>
  return USBH_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
 80092ec:	4613      	mov	r3, r2
 80092ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80092f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	4613      	mov	r3, r2
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	3317      	adds	r3, #23
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	68f9      	ldr	r1, [r7, #12]
 8009312:	4613      	mov	r3, r2
 8009314:	011b      	lsls	r3, r3, #4
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	333c      	adds	r3, #60	@ 0x3c
 800931e:	78ba      	ldrb	r2, [r7, #2]
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e009      	b.n	8009338 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	4613      	mov	r3, r2
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	333d      	adds	r3, #61	@ 0x3d
 8009334:	78ba      	ldrb	r2, [r7, #2]
 8009336:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7f7 fde4 	bl	8000f1c <HAL_Delay>
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	2b03      	cmp	r3, #3
 800936e:	d817      	bhi.n	80093a0 <USBH_Get_USB_Status+0x44>
 8009370:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <USBH_Get_USB_Status+0x1c>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009389 	.word	0x08009389
 800937c:	0800938f 	.word	0x0800938f
 8009380:	08009395 	.word	0x08009395
 8009384:	0800939b 	.word	0x0800939b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
    break;
 800938c:	e00b      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800938e:	2302      	movs	r3, #2
 8009390:	73fb      	strb	r3, [r7, #15]
    break;
 8009392:	e008      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
    break;
 8009398:	e005      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	73fb      	strb	r3, [r7, #15]
    break;
 800939e:	e002      	b.n	80093a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093a0:	2302      	movs	r3, #2
 80093a2:	73fb      	strb	r3, [r7, #15]
    break;
 80093a4:	bf00      	nop
  }
  return usb_status;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093be:	79fb      	ldrb	r3, [r7, #7]
 80093c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	e001      	b.n	80093d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80093ce:	2301      	movs	r3, #1
 80093d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	461a      	mov	r2, r3
 80093d6:	2101      	movs	r1, #1
 80093d8:	4803      	ldr	r0, [pc, #12]	@ (80093e8 <MX_DriverVbusFS+0x34>)
 80093da:	f7f8 fda9 	bl	8001f30 <HAL_GPIO_WritePin>
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	40020800 	.word	0x40020800

080093ec <malloc>:
 80093ec:	4b02      	ldr	r3, [pc, #8]	@ (80093f8 <malloc+0xc>)
 80093ee:	4601      	mov	r1, r0
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	f000 b82d 	b.w	8009450 <_malloc_r>
 80093f6:	bf00      	nop
 80093f8:	2000002c 	.word	0x2000002c

080093fc <free>:
 80093fc:	4b02      	ldr	r3, [pc, #8]	@ (8009408 <free+0xc>)
 80093fe:	4601      	mov	r1, r0
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	f000 b8f5 	b.w	80095f0 <_free_r>
 8009406:	bf00      	nop
 8009408:	2000002c 	.word	0x2000002c

0800940c <sbrk_aligned>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	4e0f      	ldr	r6, [pc, #60]	@ (800944c <sbrk_aligned+0x40>)
 8009410:	460c      	mov	r4, r1
 8009412:	6831      	ldr	r1, [r6, #0]
 8009414:	4605      	mov	r5, r0
 8009416:	b911      	cbnz	r1, 800941e <sbrk_aligned+0x12>
 8009418:	f000 f8ae 	bl	8009578 <_sbrk_r>
 800941c:	6030      	str	r0, [r6, #0]
 800941e:	4621      	mov	r1, r4
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f8a9 	bl	8009578 <_sbrk_r>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	d103      	bne.n	8009432 <sbrk_aligned+0x26>
 800942a:	f04f 34ff 	mov.w	r4, #4294967295
 800942e:	4620      	mov	r0, r4
 8009430:	bd70      	pop	{r4, r5, r6, pc}
 8009432:	1cc4      	adds	r4, r0, #3
 8009434:	f024 0403 	bic.w	r4, r4, #3
 8009438:	42a0      	cmp	r0, r4
 800943a:	d0f8      	beq.n	800942e <sbrk_aligned+0x22>
 800943c:	1a21      	subs	r1, r4, r0
 800943e:	4628      	mov	r0, r5
 8009440:	f000 f89a 	bl	8009578 <_sbrk_r>
 8009444:	3001      	adds	r0, #1
 8009446:	d1f2      	bne.n	800942e <sbrk_aligned+0x22>
 8009448:	e7ef      	b.n	800942a <sbrk_aligned+0x1e>
 800944a:	bf00      	nop
 800944c:	2000099c 	.word	0x2000099c

08009450 <_malloc_r>:
 8009450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009454:	1ccd      	adds	r5, r1, #3
 8009456:	f025 0503 	bic.w	r5, r5, #3
 800945a:	3508      	adds	r5, #8
 800945c:	2d0c      	cmp	r5, #12
 800945e:	bf38      	it	cc
 8009460:	250c      	movcc	r5, #12
 8009462:	2d00      	cmp	r5, #0
 8009464:	4606      	mov	r6, r0
 8009466:	db01      	blt.n	800946c <_malloc_r+0x1c>
 8009468:	42a9      	cmp	r1, r5
 800946a:	d904      	bls.n	8009476 <_malloc_r+0x26>
 800946c:	230c      	movs	r3, #12
 800946e:	6033      	str	r3, [r6, #0]
 8009470:	2000      	movs	r0, #0
 8009472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800954c <_malloc_r+0xfc>
 800947a:	f000 f869 	bl	8009550 <__malloc_lock>
 800947e:	f8d8 3000 	ldr.w	r3, [r8]
 8009482:	461c      	mov	r4, r3
 8009484:	bb44      	cbnz	r4, 80094d8 <_malloc_r+0x88>
 8009486:	4629      	mov	r1, r5
 8009488:	4630      	mov	r0, r6
 800948a:	f7ff ffbf 	bl	800940c <sbrk_aligned>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	4604      	mov	r4, r0
 8009492:	d158      	bne.n	8009546 <_malloc_r+0xf6>
 8009494:	f8d8 4000 	ldr.w	r4, [r8]
 8009498:	4627      	mov	r7, r4
 800949a:	2f00      	cmp	r7, #0
 800949c:	d143      	bne.n	8009526 <_malloc_r+0xd6>
 800949e:	2c00      	cmp	r4, #0
 80094a0:	d04b      	beq.n	800953a <_malloc_r+0xea>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	4639      	mov	r1, r7
 80094a6:	4630      	mov	r0, r6
 80094a8:	eb04 0903 	add.w	r9, r4, r3
 80094ac:	f000 f864 	bl	8009578 <_sbrk_r>
 80094b0:	4581      	cmp	r9, r0
 80094b2:	d142      	bne.n	800953a <_malloc_r+0xea>
 80094b4:	6821      	ldr	r1, [r4, #0]
 80094b6:	1a6d      	subs	r5, r5, r1
 80094b8:	4629      	mov	r1, r5
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ffa6 	bl	800940c <sbrk_aligned>
 80094c0:	3001      	adds	r0, #1
 80094c2:	d03a      	beq.n	800953a <_malloc_r+0xea>
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	442b      	add	r3, r5
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	f8d8 3000 	ldr.w	r3, [r8]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	bb62      	cbnz	r2, 800952c <_malloc_r+0xdc>
 80094d2:	f8c8 7000 	str.w	r7, [r8]
 80094d6:	e00f      	b.n	80094f8 <_malloc_r+0xa8>
 80094d8:	6822      	ldr	r2, [r4, #0]
 80094da:	1b52      	subs	r2, r2, r5
 80094dc:	d420      	bmi.n	8009520 <_malloc_r+0xd0>
 80094de:	2a0b      	cmp	r2, #11
 80094e0:	d917      	bls.n	8009512 <_malloc_r+0xc2>
 80094e2:	1961      	adds	r1, r4, r5
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	6025      	str	r5, [r4, #0]
 80094e8:	bf18      	it	ne
 80094ea:	6059      	strne	r1, [r3, #4]
 80094ec:	6863      	ldr	r3, [r4, #4]
 80094ee:	bf08      	it	eq
 80094f0:	f8c8 1000 	streq.w	r1, [r8]
 80094f4:	5162      	str	r2, [r4, r5]
 80094f6:	604b      	str	r3, [r1, #4]
 80094f8:	4630      	mov	r0, r6
 80094fa:	f000 f82f 	bl	800955c <__malloc_unlock>
 80094fe:	f104 000b 	add.w	r0, r4, #11
 8009502:	1d23      	adds	r3, r4, #4
 8009504:	f020 0007 	bic.w	r0, r0, #7
 8009508:	1ac2      	subs	r2, r0, r3
 800950a:	bf1c      	itt	ne
 800950c:	1a1b      	subne	r3, r3, r0
 800950e:	50a3      	strne	r3, [r4, r2]
 8009510:	e7af      	b.n	8009472 <_malloc_r+0x22>
 8009512:	6862      	ldr	r2, [r4, #4]
 8009514:	42a3      	cmp	r3, r4
 8009516:	bf0c      	ite	eq
 8009518:	f8c8 2000 	streq.w	r2, [r8]
 800951c:	605a      	strne	r2, [r3, #4]
 800951e:	e7eb      	b.n	80094f8 <_malloc_r+0xa8>
 8009520:	4623      	mov	r3, r4
 8009522:	6864      	ldr	r4, [r4, #4]
 8009524:	e7ae      	b.n	8009484 <_malloc_r+0x34>
 8009526:	463c      	mov	r4, r7
 8009528:	687f      	ldr	r7, [r7, #4]
 800952a:	e7b6      	b.n	800949a <_malloc_r+0x4a>
 800952c:	461a      	mov	r2, r3
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	42a3      	cmp	r3, r4
 8009532:	d1fb      	bne.n	800952c <_malloc_r+0xdc>
 8009534:	2300      	movs	r3, #0
 8009536:	6053      	str	r3, [r2, #4]
 8009538:	e7de      	b.n	80094f8 <_malloc_r+0xa8>
 800953a:	230c      	movs	r3, #12
 800953c:	6033      	str	r3, [r6, #0]
 800953e:	4630      	mov	r0, r6
 8009540:	f000 f80c 	bl	800955c <__malloc_unlock>
 8009544:	e794      	b.n	8009470 <_malloc_r+0x20>
 8009546:	6005      	str	r5, [r0, #0]
 8009548:	e7d6      	b.n	80094f8 <_malloc_r+0xa8>
 800954a:	bf00      	nop
 800954c:	200009a0 	.word	0x200009a0

08009550 <__malloc_lock>:
 8009550:	4801      	ldr	r0, [pc, #4]	@ (8009558 <__malloc_lock+0x8>)
 8009552:	f000 b84b 	b.w	80095ec <__retarget_lock_acquire_recursive>
 8009556:	bf00      	nop
 8009558:	20000ae0 	.word	0x20000ae0

0800955c <__malloc_unlock>:
 800955c:	4801      	ldr	r0, [pc, #4]	@ (8009564 <__malloc_unlock+0x8>)
 800955e:	f000 b846 	b.w	80095ee <__retarget_lock_release_recursive>
 8009562:	bf00      	nop
 8009564:	20000ae0 	.word	0x20000ae0

08009568 <memset>:
 8009568:	4402      	add	r2, r0
 800956a:	4603      	mov	r3, r0
 800956c:	4293      	cmp	r3, r2
 800956e:	d100      	bne.n	8009572 <memset+0xa>
 8009570:	4770      	bx	lr
 8009572:	f803 1b01 	strb.w	r1, [r3], #1
 8009576:	e7f9      	b.n	800956c <memset+0x4>

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	@ (8009594 <_sbrk_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f7 fbe6 	bl	8000d54 <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20000adc 	.word	0x20000adc

08009598 <__errno>:
 8009598:	4b01      	ldr	r3, [pc, #4]	@ (80095a0 <__errno+0x8>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	2000002c 	.word	0x2000002c

080095a4 <__libc_init_array>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4d0d      	ldr	r5, [pc, #52]	@ (80095dc <__libc_init_array+0x38>)
 80095a8:	4c0d      	ldr	r4, [pc, #52]	@ (80095e0 <__libc_init_array+0x3c>)
 80095aa:	1b64      	subs	r4, r4, r5
 80095ac:	10a4      	asrs	r4, r4, #2
 80095ae:	2600      	movs	r6, #0
 80095b0:	42a6      	cmp	r6, r4
 80095b2:	d109      	bne.n	80095c8 <__libc_init_array+0x24>
 80095b4:	4d0b      	ldr	r5, [pc, #44]	@ (80095e4 <__libc_init_array+0x40>)
 80095b6:	4c0c      	ldr	r4, [pc, #48]	@ (80095e8 <__libc_init_array+0x44>)
 80095b8:	f000 f864 	bl	8009684 <_init>
 80095bc:	1b64      	subs	r4, r4, r5
 80095be:	10a4      	asrs	r4, r4, #2
 80095c0:	2600      	movs	r6, #0
 80095c2:	42a6      	cmp	r6, r4
 80095c4:	d105      	bne.n	80095d2 <__libc_init_array+0x2e>
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095cc:	4798      	blx	r3
 80095ce:	3601      	adds	r6, #1
 80095d0:	e7ee      	b.n	80095b0 <__libc_init_array+0xc>
 80095d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d6:	4798      	blx	r3
 80095d8:	3601      	adds	r6, #1
 80095da:	e7f2      	b.n	80095c2 <__libc_init_array+0x1e>
 80095dc:	080096c0 	.word	0x080096c0
 80095e0:	080096c0 	.word	0x080096c0
 80095e4:	080096c0 	.word	0x080096c0
 80095e8:	080096c4 	.word	0x080096c4

080095ec <__retarget_lock_acquire_recursive>:
 80095ec:	4770      	bx	lr

080095ee <__retarget_lock_release_recursive>:
 80095ee:	4770      	bx	lr

080095f0 <_free_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4605      	mov	r5, r0
 80095f4:	2900      	cmp	r1, #0
 80095f6:	d041      	beq.n	800967c <_free_r+0x8c>
 80095f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095fc:	1f0c      	subs	r4, r1, #4
 80095fe:	2b00      	cmp	r3, #0
 8009600:	bfb8      	it	lt
 8009602:	18e4      	addlt	r4, r4, r3
 8009604:	f7ff ffa4 	bl	8009550 <__malloc_lock>
 8009608:	4a1d      	ldr	r2, [pc, #116]	@ (8009680 <_free_r+0x90>)
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	b933      	cbnz	r3, 800961c <_free_r+0x2c>
 800960e:	6063      	str	r3, [r4, #4]
 8009610:	6014      	str	r4, [r2, #0]
 8009612:	4628      	mov	r0, r5
 8009614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009618:	f7ff bfa0 	b.w	800955c <__malloc_unlock>
 800961c:	42a3      	cmp	r3, r4
 800961e:	d908      	bls.n	8009632 <_free_r+0x42>
 8009620:	6820      	ldr	r0, [r4, #0]
 8009622:	1821      	adds	r1, r4, r0
 8009624:	428b      	cmp	r3, r1
 8009626:	bf01      	itttt	eq
 8009628:	6819      	ldreq	r1, [r3, #0]
 800962a:	685b      	ldreq	r3, [r3, #4]
 800962c:	1809      	addeq	r1, r1, r0
 800962e:	6021      	streq	r1, [r4, #0]
 8009630:	e7ed      	b.n	800960e <_free_r+0x1e>
 8009632:	461a      	mov	r2, r3
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	b10b      	cbz	r3, 800963c <_free_r+0x4c>
 8009638:	42a3      	cmp	r3, r4
 800963a:	d9fa      	bls.n	8009632 <_free_r+0x42>
 800963c:	6811      	ldr	r1, [r2, #0]
 800963e:	1850      	adds	r0, r2, r1
 8009640:	42a0      	cmp	r0, r4
 8009642:	d10b      	bne.n	800965c <_free_r+0x6c>
 8009644:	6820      	ldr	r0, [r4, #0]
 8009646:	4401      	add	r1, r0
 8009648:	1850      	adds	r0, r2, r1
 800964a:	4283      	cmp	r3, r0
 800964c:	6011      	str	r1, [r2, #0]
 800964e:	d1e0      	bne.n	8009612 <_free_r+0x22>
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	6053      	str	r3, [r2, #4]
 8009656:	4408      	add	r0, r1
 8009658:	6010      	str	r0, [r2, #0]
 800965a:	e7da      	b.n	8009612 <_free_r+0x22>
 800965c:	d902      	bls.n	8009664 <_free_r+0x74>
 800965e:	230c      	movs	r3, #12
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	e7d6      	b.n	8009612 <_free_r+0x22>
 8009664:	6820      	ldr	r0, [r4, #0]
 8009666:	1821      	adds	r1, r4, r0
 8009668:	428b      	cmp	r3, r1
 800966a:	bf04      	itt	eq
 800966c:	6819      	ldreq	r1, [r3, #0]
 800966e:	685b      	ldreq	r3, [r3, #4]
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	bf04      	itt	eq
 8009674:	1809      	addeq	r1, r1, r0
 8009676:	6021      	streq	r1, [r4, #0]
 8009678:	6054      	str	r4, [r2, #4]
 800967a:	e7ca      	b.n	8009612 <_free_r+0x22>
 800967c:	bd38      	pop	{r3, r4, r5, pc}
 800967e:	bf00      	nop
 8009680:	200009a0 	.word	0x200009a0

08009684 <_init>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr

08009690 <_fini>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr
